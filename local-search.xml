<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>textnum</title>
    <link href="/2024/04/25/textnum/"/>
    <url>/2024/04/25/textnum/</url>
    
    <content type="html"><![CDATA[<p>上传上去没</p><h1 id="2、集成电路总线-IIC"><a href="#2、集成电路总线-IIC" class="headerlink" title="2、集成电路总线(IIC)"></a>2、集成电路总线(IIC)</h1><h2 id="2-1简介"><a href="#2-1简介" class="headerlink" title="2.1简介"></a>2.1简介</h2><ul><li>IIC使用两根信号线进行通信：一根时钟线SCL，一根数据线SDA。IIC将SCL处于高时SDA拉低的动作作为开始信号，SCL处于高时SDA拉高的动作作为结束信号；传输数据时，SDA在SCL低电平时改变数据，在SCL高电平时保持数据，每个SCL脉冲的高电平传递1位数据。IIC是半双工同步通信协议</li></ul><h2 id="2-2总线特性与硬件结构"><a href="#2-2总线特性与硬件结构" class="headerlink" title="2.2总线特性与硬件结构"></a>2.2总线特性与硬件结构</h2><ul><li><p>IIC总线上所有器件的SDA、SCL引脚输出驱动都为 <strong>开漏(OD)</strong> 结构，通过外接上拉电阻实现总线上所有节点SDA、SCL信号的<strong>线与</strong>逻辑关系；</p></li><li><p>总线上的所有设备通过软件寻址且具有唯一的地址（7位或10位）。7位“从机专用地址码”，其高4位为由生产厂家制定的<strong>设备类型地址</strong>，低3位为器件引脚定义地址（由使用者定义）；10位地址不常见；</p></li><li><p>支持多主机。在总线上存在多个主机时，通过冲突检测和仲裁机制防止多个主机同时发起数据传输时存在的冲突；</p></li><li><p>通信模式</p><ul><li><table><thead><tr><th align="center">模式</th><th align="center">速度</th></tr></thead><tbody><tr><td align="center">标准模式（Standard Mode）</td><td align="center">100kb&#x2F;s</td></tr><tr><td align="center">快速模式（Fast Mode）</td><td align="center">400kb&#x2F;s</td></tr><tr><td align="center">增强快速模式（Fast Mode Plus）</td><td align="center">1Mb&#x2F;s</td></tr><tr><td align="center">高速模式（High Speed Mode）</td><td align="center">3.4Mb&#x2F;s</td></tr><tr><td align="center">极速模式（Ultra-FastMode）</td><td align="center">5Mb&#x2F;s</td></tr></tbody></table></li></ul></li><li><p>硬件结构</p><ul><li>IIC使用两根信号线进行通信，要求两根线都使用 <strong>开漏输出接上拉电阻</strong> 的配置，以此实现总线上所有节点SDA、SCL信号的 <strong>线与</strong> 逻辑关系。</li><li><img src="E:\Blog\source\_posts\嵌入式常见协议总结\IIC总线结构体图.png" alt="总线结构图" style="zoom:80%;" /></li><li>IIC允许一对多通信，但是同一时间只能有一个丛机跟主机通信</li></ul></li></ul><h2 id="2-3工作时序"><a href="#2-3工作时序" class="headerlink" title="2.3工作时序"></a>2.3工作时序</h2><ul><li><strong>数据有效性以及采集过程</strong><ul><li>IIC 的数据读取动作都在 <strong>SCL为高</strong> 时产生，<strong>SCL为低</strong>时是数据改变的时期，无论SDA如何变化都不影响读取。所以，传输数据的过程中，当SCL为高时，数据应当保持稳定，避免数据的采集出错。</li></ul></li><li><strong>开始和结束信号</strong><ul><li><strong>开始信号：</strong>SCL为高时，SDA从高到低的跳变产生开始信号</li><li><strong>结束信号：</strong>SCL为高时，SDA从低到高的跳变产生结束信号</li></ul></li><li><strong>重复开始信号（ReSTART&#x2F;Sr）：</strong> 在结束时不给出STOP信号，而以一个时钟周期内再次给出开始信号作为替代</li><li><strong>字节格式：</strong>SDA数据线上的每个字节<strong>必须是8位</strong>，对于每次传输的<strong>字节数没有限制</strong>。每个字节（8位）数据传送完后紧跟着应答信号（ACK，第9位）。数据的先后顺序为：<strong>高位在前</strong> 。</li><li><strong>应答信号（ACK）：</strong>协议规定数据传输过程必须包含应答（ACK）。接收器通过应答告知发送的字节已被成功接收，之后发送器可以进行下一个字节的传输。<strong>主机产生数据传输过程中的所有时钟，包括用于应答的第9个时钟。发送器在应答时钟周期内释放对SDA总线的控制，</strong>这样接收器可以通过将SDA线拉低告知发送器：数据已被成功接收。（<strong>特别注意，ACK信号是主机发送完数据后，必须必须释放SDA总线后，丛机来控制SDA总线发出的信号</strong>）<ul><li>应答信号分为两种：<ul><li>当第9位(应答位)为 <strong>低电平</strong> 时，为 <strong>ACK</strong> 信号</li><li>当第9位(应答位)为 <strong>高电平</strong> 时，为 <strong>NACK</strong>信号</li></ul></li></ul></li></ul><h2 id="2-4地址设备为7位的通信过程"><a href="#2-4地址设备为7位的通信过程" class="headerlink" title="2.4地址设备为7位的通信过程"></a>2.4地址设备为7位的通信过程</h2><ul><li>完整通信示意图：<ul><li><img src="E:\Blog\source\_posts\嵌入式常见协议总结\7bit设备地址通信示意图.png" alt="示意图" style="zoom:80%;" /></li><li><strong>START信号后，第一个字节包含设备7位地址以及1位读写位，读写位表示主机将要对丛机进行的操作。发送完这个字节之后，主机释放SDA总线等待从机给出ACK应答。如果从机给出了ACK应答，表示从机地址正确（有从机响应）并且已知晓是读还是写，便可以开始读写数据。如果从机没有给出ACK应答，则说明接收设备可能没有收到数据（如寻址的设备不存在或是设备正在忙碌）或无法解析收到的数据，如果是这样，则由主机来决定如何处理（STOP或ReSTART）。</strong><ul><li>情况一：主机写，丛机收，传输过程传输方向不变<ul><li><img src="E:\Blog\source\_posts\嵌入式常见协议总结\主发丛收.png" alt="示意图" style="zoom:80%;" /></li></ul></li><li>情况二：主机收，丛机发送，传输过程传输方向改变<ul><li><img src="E:\Blog\source\_posts\嵌入式常见协议总结\主收丛发.png" alt="示意图" style="zoom:80%;" /></li></ul></li></ul></li></ul></li></ul><h2 id="2-4实例操作"><a href="#2-4实例操作" class="headerlink" title="2.4实例操作"></a>2.4实例操作</h2><ul><li><p><strong>基于stm32的IIC操作</strong></p><ul><li><p>情况一：用GPIO来模拟IIC通信过程</p><ul><li><pre><code class="c">/*以F103为例子，SCL--&gt;PB6,SDA--&gt;PB7，精简代码，不是所有都列出来*/#define SCL(x)do&#123;x? HAL_GPIO_WritePin(GPIOB,GPIO_PIN6,GPIO_PIN_SET):                     \HAL_GPIO_WritePin(GPIOB,GPIO_PIN6,GPIO_PIN_RESET);&#125;while(0)#define SDA(x)do&#123;x? HAL_GPIO_WritePin(GPIOB,GPIO_PIN7,GPIO_PIN_SET):                     \HAL_GPIO_WritePin(GPIOB,GPIO_PIN7,GPIO_PIN_RESET);&#125;while(0)void init(void)//初始化函数&#123;    GPIO_InitTypeDef gpio_init_struct;        /*首先是初始化这两个IO口，SCL配置为推挽输出，SDA配置为开漏输出（这样保证无论在哪种通信下，都不需要去切换IO口的     方向，因为开漏输出也可以读取IO的电平）*/        ...配置省略            HAL_GPIO_Init(GPIOB, &amp;gpio_init_struct);    stop();//初始化后先停止&#125;void start(void)//起始信号&#123;    /*SCL为高时，SDA从高到低的跳变产生开始信号*/    SDA(1);    delay_us(2);    SCL(1);    delay_us(2);    SDA(0);    delay_us(2);        SCL(0);//这个操作是钳住IIC总线，准备接受或者发送数据    delay_us(2);&#125;void stop(void)//停止信号&#123;    /*SCL为高时，SDA从低到高的跳变产生结束信号*/    SDA(0);    delay_us(2);    SCL(1);    delay_us(2);    SDA(1);    delay_us(2);&#125;void master_ack(void)//主机应答信号&#123;    SDA(0);    delay_us(2);    SCL(1);    delay_us(2);    SCL(0);    delay_us(2);        SDA(1);//释放总线    delay_us(2);      &#125;void master_nack(void)//主机不应答信号&#123;    SDA(1);    delay_us(2);    SCL(1);    delay_us(2);    SCL(0);    delay_us(2);     &#125;uint8_t slave_ack(void)&#123;    uint8_t timeout;    uint8_t res=0;    SDA(1);//主机释放总线，此时丛机可以操作SDA线    delay_us(2);    SCL(1);//拉高时钟线，可以传输数据了    delay_us(2);    while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7))//等待SDA线的电平被从机拉低    &#123;        timeout++;        if(timeout&gt;250)        &#123;            stop();//超时            res=1;            break;        &#125;    &#125;    SCL(0);    delay_us(2);    return res;&#125;void iic_send(uint8_t data)//发送8位数据&#123;    uint8_t i;    for(i=0;i&lt;8;i++)    &#123;        SDA((data&amp;0x80)&gt;&gt;7);//因为IIC是先传输最高位的        delay_us(2);        SCL(1);        delay_us(2);        SCL(0);        delay_us(2);        data&lt;&lt;=1;    &#125;    SDA(1);//释放总线&#125;uint8_t iic_read(uint8_t ack)//读取8位数据   &#123;    uint8_t res;    uint8_t i;    for(i=0;i&lt;8;i++)    &#123;        res&lt;&lt;=1;        SCL(1);        delay_us(2);        if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7)           &#123;               res++;           &#125;        SCL(0);          delay_us(2);    &#125;    if(!ack)    &#123;         master_nack();          &#125;    else    &#123;         master_ack();           &#125;    return res;       &#125;<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br>- 情况二：硬件IIC，用HAL库函数实现（F1系列HAL库硬件IIC可能会有BUG）<br><br>  - ```<span class="hljs-function">c</span><br><span class="hljs-function">    I2C_HandleTypeDef handle_iic</span><br><span class="hljs-function">    <span class="hljs-type">void</span> <span class="hljs-title">iic_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><span class="hljs-comment">//硬件IIC初始化函数</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">/*具体句柄配置省略，设置i2c速度、模式、丛机地址位数等等*/</span><br>        ...省略代码<br>        <span class="hljs-built_in">HAL_I2C_Iint</span>(&amp;handle_iic);<span class="hljs-comment">/*这是IIC的初始化，还需要对应GPIO的初始化，这个函数内部会调用HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)这个函数*/</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HAL_I2C_MspInit</span><span class="hljs-params">(I2C_HandleTypeDef* hi2c)</span></span><br><span class="hljs-function">    </span>&#123;<br>        GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">if</span>(hi2c-&gt;I2C1)<br>        &#123;<br>           ...具体GPIO配置省略<br>           <span class="hljs-built_in">HAL_GPIO_Init</span>();<br>           __HAL_RCC_I2C1_CLK_ENABLE();<br>           <span class="hljs-built_in">HAL_NVIC_SetPriority</span>(I2C1_EV_IRQn, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>           <span class="hljs-built_in">HAL_NVIC_EnableIRQ</span>(I2C1_EV_IRQn);<br>           <span class="hljs-built_in">HAL_NVIC_SetPriority</span>(I2C1_ER_IRQn, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>           <span class="hljs-built_in">HAL_NVIC_EnableIRQ</span>(I2C1_ER_IRQn);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/*HAL库提供三种类型读写函（阻塞、非阻塞（其中包括中断和DMA））*/</span><br>    <span class="hljs-comment">//阻塞IIC发送、接受代码原型</span><br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Master_Transmit</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size, <span class="hljs-type">uint32_t</span> Timeout)</span></span>;<br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Master_Receive</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size, <span class="hljs-type">uint32_t</span> Timeout)</span></span>;<br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Mem_Write</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint16_t</span> MemAddress, <span class="hljs-type">uint16_t</span> MemAddSize, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size, <span class="hljs-type">uint32_t</span> Timeout)</span></span>;<br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Mem_Read</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint16_t</span> MemAddress, <span class="hljs-type">uint16_t</span> MemAddSize, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size, <span class="hljs-type">uint32_t</span> Timeout)</span></span>;<br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_IsDeviceReady</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint32_t</span> Trials, <span class="hljs-type">uint32_t</span> Timeout)</span></span>;<br>    <br>    <span class="hljs-comment">//非阻塞普通中断IIC发送、接受代码原型</span><br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Master_Transmit_IT</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size)</span></span>;<br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Master_Receive_IT</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size)</span></span>;<br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Mem_Write_IT</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint16_t</span> MemAddress, <span class="hljs-type">uint16_t</span> MemAddSize, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size)</span></span>;<br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Mem_Read_IT</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint16_t</span> MemAddress, <span class="hljs-type">uint16_t</span> MemAddSize, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size)</span></span>;<br>    <br>    <span class="hljs-comment">//非阻塞DMA中断IIC发送、接受代码原型</span><br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Master_Transmit_DMA</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size)</span></span>;<br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Master_Receive_DMA</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size)</span></span>;<br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Mem_Write_DMA</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint16_t</span> MemAddress, <span class="hljs-type">uint16_t</span> MemAddSize, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size)</span></span>;<br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Mem_Read_DMA</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint16_t</span> MemAddress, <span class="hljs-type">uint16_t</span> MemAddSize, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size)</span></span>;<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li><li><p><strong>通过硬件IIC读取AT24C02代码</strong></p><ul><li><p>AT24Cxx这是一个IIC接口的EEPROM存储芯片</p><ul><li><pre><code class="c">/* USER CODE BEGIN PV *///读写地址#define AT24C02_Write 0xA0#define AT24C02_Read  0xA1//三次写入的字符串unsigned char str1[]=&#123;&quot;xyz666&quot;&#125;;unsigned char str2[]=&#123;&quot;1234567&quot;&#125;;unsigned char str3[]=&#123;&quot;abcdefg&quot;&#125;;//读取缓存区uint8_t ReadBuffer[50];/* USER CODE END PV */  /* USER CODE BEGIN 2 */    HAL_UART_Transmit_IT(&amp;huart1,&quot;Init Ok!\r\n&quot;,sizeof(&quot;Init Ok!\r\n&quot;));    HAL_Delay(100);    //阻塞方式写入读取    if(HAL_I2C_Mem_Write(&amp;hi2c1,AT24C02_Write,0,I2C_MEMADD_SIZE_8BIT,str1,sizeof(str1),1000)==HAL_OK)    HAL_UART_Transmit_IT(&amp;huart1,&quot;STR1_Write_OK\r\n&quot;,sizeof(&quot;STR1_Write_OK\r\n&quot;));    HAL_Delay(1000);    HAL_I2C_Mem_Read(&amp;hi2c1,AT24C02_Read,0,I2C_MEMADD_SIZE_8BIT,ReadBuffer,sizeof(str1),1000);    HAL_Delay(1000);    HAL_UART_Transmit_IT(&amp;huart1,ReadBuffer,sizeof(str1));    HAL_Delay(1000);    //中断方式写入读取    if(HAL_I2C_Mem_Write_IT(&amp;hi2c1,AT24C02_Write,0,I2C_MEMADD_SIZE_8BIT,str2,sizeof(str2))==HAL_OK)    HAL_UART_Transmit_IT(&amp;huart1,&quot;STR2_Write_OK\r\n&quot;,sizeof(&quot;STR2_Write_OK\r\n&quot;));    HAL_Delay(1000);    HAL_I2C_Mem_Read_IT(&amp;hi2c1,AT24C02_Read,0,I2C_MEMADD_SIZE_8BIT,ReadBuffer,sizeof(str2));    HAL_Delay(1000);    HAL_UART_Transmit_IT(&amp;huart1,ReadBuffer,sizeof(str2));    HAL_Delay(1000);    //DMA中断方式写入读取    if(HAL_I2C_Mem_Write_DMA(&amp;hi2c1,AT24C02_Write,0,I2C_MEMADD_SIZE_8BIT,str3,sizeof(str3))==HAL_OK)    HAL_UART_Transmit_IT(&amp;huart1,&quot;STR3_Write_OK\r\n&quot;,sizeof(&quot;STR3_Write_OK\r\n&quot;));    HAL_Delay(1000);    HAL_I2C_Mem_Read_DMA(&amp;hi2c1,AT24C02_Read,0,I2C_MEMADD_SIZE_8BIT,ReadBuffer,sizeof(str3));    HAL_Delay(1000);    HAL_UART_Transmit_IT(&amp;huart1,ReadBuffer,sizeof(str3));    HAL_Delay(1000);  /* USER CODE END 2 */</code></pre></li></ul></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>FreeRTOS总结</title>
    <link href="/2024/04/20/FreeRTOS%E6%80%BB%E7%BB%93/"/>
    <url>/2024/04/20/FreeRTOS%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>嵌入式常见协议总结</title>
    <link href="/2023/10/30/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B8%B8%E8%A7%81%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93/"/>
    <url>/2023/10/30/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B8%B8%E8%A7%81%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="1、UART串口通信"><a href="#1、UART串口通信" class="headerlink" title="1、UART串口通信"></a>1、UART串口通信</h1><h2 id="1-1简介"><a href="#1-1简介" class="headerlink" title="1.1简介"></a>1.1简介</h2><ul><li><p>通用异步收发器 <strong>UART</strong>（Universal AsynchronousReceiver&#x2F;Transmitter)，是一种串行、异步、全双工的通信协议。高电平代表’1‘，低电平代表’0‘。特别注意固定格式位，起始位以0为通信起步，停止位以1作为结束位。</p></li><li><p>整体结构如图：</p><p><img src="/./../photo/%E7%BB%93%E6%9E%84%E7%AE%80%E5%9B%BE.png"></p></li></ul><h2 id="1-2参数配置"><a href="#1-2参数配置" class="headerlink" title="1.2参数配置"></a>1.2参数配置</h2><ul><li><p>数据传输格式</p><p><img src="/./../photo/UART%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F.png" alt="数据格式"></p><ul><li>起始位总是以低电平有效，停止位以高电平有效。</li><li>数据位：数据位可以是5、6、7、8，9位等，构成一个字符（一般都是8位）。如ASCII码（7位），扩展BCD码（8位）。先发送<strong>最低位</strong>，最后发送<strong>最高位</strong>，使用低电平表示‘0’高电平表示‘1’完成数据位的传输。</li><li>奇偶检验位：数据位加上这一位后，使得“1”的位数应为偶数(偶校验)或奇数(奇校验)，以此来校验数据传送的正确性。</li></ul></li><li><p>波特率</p><ul><li>数据传输的速率用波特率来表示。通俗讲就是让通信双方知道什么时间点来采样数据。例如:通信波特率是115200bps，即代表1秒可以传输115200位的数据。</li></ul></li></ul><h2 id="1-3示例"><a href="#1-3示例" class="headerlink" title="1.3示例"></a>1.3示例</h2><ul><li><p>在stm32中如何使用串口，来实现printf函数与PC串口助手进行通信</p><ul><li><pre><code class="c">//值得的注意点：printf函数最终调用的是fputc(int ch, FILE *f)来输出字符串的，但是这个函数在stdio.h文件里面仅仅是定义了但是没有实现，所以必须重定义这个函数。/*以下示例均以UART1来作为示例*//*HAL库函数版本实现串口的中断接收和发送*/typedef struct&#123;    __IO uint32_t SR;         /*!&lt; USART Status register,                   Address offset: 0x00 */    __IO uint32_t DR;         /*!&lt; USART Data register,                     Address offset: 0x04 */    __IO uint32_t BRR;        /*!&lt; USART Baud rate register,                Address offset: 0x08 */    __IO uint32_t CR1;        /*!&lt; USART Control register 1,                Address offset: 0x0C */    __IO uint32_t CR2;        /*!&lt; USART Control register 2,                Address offset: 0x10 */    __IO uint32_t CR3;        /*!&lt; USART Control register 3,                Address offset: 0x14 */    __IO uint32_t GTPR;       /*!&lt; USART Guard time and prescaler register, Address offset: 0x18 */&#125; USART_TypeDef;//这是底层寄存器封装#define PERIPH_BASE           0x40000000UL#define APB2PERIPH_BASE       (PERIPH_BASE + 0x00010000UL)#define USART1_BASE           (APB2PERIPH_BASE + 0x00003800UL)#define USART1              ((USART_TypeDef *)USART1_BASE)/*重定义fputc(int ch, FILE *f)*/int fputc(int ch, FILE *f)&#123;    while ((USART1-&gt;SR &amp; 0X40) == 0);     /* 等待上一个字符发送完成 */    USART_UX-&gt;DR = (uint8_t)ch;           /* 将要发送的字符 ch 写入到DR寄存器 */    return ch;&#125;/*初始化串口1,省略大部分代码，保留核心函数*/UART_HandleTypeDef g_uart1_handle;  /* UART句柄 */HAL_UART_Init(&amp;g_uart1_handle)内部调用--&gt;HAL_UART_MspInit(&amp;g_uart1_handle)--&gt; HAL_GPIO_Init()函数来配置相关引脚的复用输入输出--&gt;HAL_NVIC_EnableIRQ()使能串口中断--&gt;HAL_NVIC_SetPriority()设置中断优先级    HAL_UART_Receive_IT(&amp;g_uart1_handle, (uint8_t *)g_rx_buffer, RXBUFFERSIZE)开启串口接收中断天    USART1_IRQHandler()串口1中断服务函数--&gt;HAL_UART_IRQHandler()HAL串口中断公共服务函--&gt;         HAL_UART_RxCpltCallback()中断接收回调函数<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><br># <span class="hljs-number">2</span>、集成电路总线(IIC)<br><br>## <span class="hljs-number">2.1</span>简介<br><br>- IIC使用两根信号线进行通信：一根时钟线SCL，一根数据线SDA。IIC将SCL处于高时SDA拉低的动作作为开始信号，SCL处于高时SDA拉高的动作作为结束信号；传输数据时，SDA在SCL低电平时改变数据，在SCL高电平时保持数据，每个SCL脉冲的高电平传递<span class="hljs-number">1</span>位数据。IIC是半双工同步通信协议<br><br>## <span class="hljs-number">2.2</span>总线特性与硬件结构<br><br>- IIC总线上所有器件的SDA、SCL引脚输出驱动都为 **开漏(OD)** 结构，通过外接上拉电阻实现总线上所有节点SDA、SCL信号的**线与**逻辑关系；<br><br>- 总线上的所有设备通过软件寻址且具有唯一的地址（<span class="hljs-number">7</span>位或<span class="hljs-number">10</span>位）。<span class="hljs-number">7</span>位“从机专用地址码”，其高<span class="hljs-number">4</span>位为由生产厂家制定的**设备类型地址**，低<span class="hljs-number">3</span>位为器件引脚定义地址（由使用者定义）；<span class="hljs-number">10</span>位地址不常见；<br><br>- 支持多主机。在总线上存在多个主机时，通过冲突检测和仲裁机制防止多个主机同时发起数据传输时存在的冲突；<br><br>- 通信模式<br><br>  - |              模式              |  速度   |<br>    | :----------------------------: | :-----: |<br>    |   标准模式（Standard Mode）    | <span class="hljs-number">100</span>kb/s |<br>    |     快速模式（Fast Mode）      | <span class="hljs-number">400</span>kb/s |<br>    | 增强快速模式（Fast Mode Plus） |  <span class="hljs-number">1</span>Mb/s  |<br>    |  高速模式（High Speed Mode）   | <span class="hljs-number">3.4</span>Mb/s |<br>    |   极速模式（Ultra-FastMode）   |  <span class="hljs-number">5</span>Mb/s  |<br><br>- 硬件结构<br><br>  - IIC使用两根信号线进行通信，要求两根线都使用 **开漏输出接上拉电阻** 的配置，以此实现总线上所有节点SDA、SCL信号的 **线与** 逻辑关系。<br>  - &lt;img src=<span class="hljs-string">&quot;./../photo/IIC总线结构体图.png&quot;</span> alt=<span class="hljs-string">&quot;总线结构图&quot;</span> style=<span class="hljs-string">&quot;zoom:80%;&quot;</span> /&gt;<br>  - IIC允许一对多通信，但是同一时间只能有一个丛机跟主机通信<br><br>## <span class="hljs-number">2.3</span>工作时序<br><br>- **数据有效性以及采集过程**<br>  - IIC 的数据读取动作都在 **SCL为高** 时产生，**SCL为低**时是数据改变的时期，无论SDA如何变化都不影响读取。所以，传输数据的过程中，当SCL为高时，数据应当保持稳定，避免数据的采集出错。<br>- **开始和结束信号**<br>  - **开始信号：**SCL为高时，SDA从高到低的跳变产生开始信号<br>  - **结束信号：**SCL为高时，SDA从低到高的跳变产生结束信号<br>- **重复开始信号（ReSTART/Sr）：** 在结束时不给出STOP信号，而以一个时钟周期内再次给出开始信号作为替代<br>- **字节格式：**SDA数据线上的每个字节**必须是<span class="hljs-number">8</span>位**，对于每次传输的**字节数没有限制**。每个字节（<span class="hljs-number">8</span>位）数据传送完后紧跟着应答信号（ACK，第<span class="hljs-number">9</span>位）。数据的先后顺序为：**高位在前** 。<br>- **应答信号（ACK）：**协议规定数据传输过程必须包含应答（ACK）。接收器通过应答告知发送的字节已被成功接收，之后发送器可以进行下一个字节的传输。**主机产生数据传输过程中的所有时钟，包括用于应答的第<span class="hljs-number">9</span>个时钟。发送器在应答时钟周期内释放对SDA总线的控制，**这样接收器可以通过将SDA线拉低告知发送器：数据已被成功接收。（**特别注意，ACK信号是主机发送完数据后，必须必须释放SDA总线后，丛机来控制SDA总线发出的信号**）<br>  - 应答信号分为两种：<br>    - 当第<span class="hljs-number">9</span>位(应答位)为 **低电平** 时，为 **ACK** 信号<br>    - 当第<span class="hljs-number">9</span>位(应答位)为 **高电平** 时，为 **NACK**信号<br><br>## <span class="hljs-number">2.4</span>地址设备为<span class="hljs-number">7</span>位的通信过程<br><br>- 完整通信示意图：<br>  - &lt;img src=<span class="hljs-string">&quot;./../photo/7bit设备地址通信示意图.png&quot;</span> alt=<span class="hljs-string">&quot;示意图&quot;</span> style=<span class="hljs-string">&quot;zoom:80%;&quot;</span> /&gt;<br>  - **START信号后，第一个字节包含设备<span class="hljs-number">7</span>位地址以及<span class="hljs-number">1</span>位读写位，读写位表示主机将要对丛机进行的操作。发送完这个字节之后，主机释放SDA总线等待从机给出ACK应答。如果从机给出了ACK应答，表示从机地址正确（有从机响应）并且已知晓是读还是写，便可以开始读写数据。如果从机没有给出ACK应答，则说明接收设备可能没有收到数据（如寻址的设备不存在或是设备正在忙碌）或无法解析收到的数据，如果是这样，则由主机来决定如何处理（STOP或ReSTART）。**<br>    - 情况一：主机写，丛机收，传输过程传输方向不变<br>      - &lt;img src=<span class="hljs-string">&quot;./../photo/主发丛收.png&quot;</span> alt=<span class="hljs-string">&quot;示意图&quot;</span> style=<span class="hljs-string">&quot;zoom:80%;&quot;</span> /&gt;<br>    - 情况二：主机收，丛机发送，传输过程传输方向改变<br>      - &lt;img src=<span class="hljs-string">&quot;./../photo/主收丛发.png&quot;</span> alt=<span class="hljs-string">&quot;示意图&quot;</span> style=<span class="hljs-string">&quot;zoom:80%;&quot;</span> /&gt;<br><br>## <span class="hljs-number">2.4</span>实例操作<br><br>- 情况一：用GPIO来模拟IIC通信过程;<br><br>  - ```c<br>    <span class="hljs-comment">/*以F103为例子，SCL--&gt;PB6,SDA--&gt;PB7，精简代码，不是所有都列出来*/</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> SCL(x)do&#123;x? HAL_GPIO_WritePin(GPIOB,GPIO_PIN6,GPIO_PIN_SET):</span><br>     \<span class="hljs-built_in">HAL_GPIO_WritePin</span>(GPIOB,GPIO_PIN6,GPIO_PIN_RESET);&#125;<span class="hljs-keyword">while</span>(<span class="hljs-number">0</span>)<br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> SDA(x)do&#123;x? HAL_GPIO_WritePin(GPIOB,GPIO_PIN7,GPIO_PIN_SET):</span><br>     \<span class="hljs-built_in">HAL_GPIO_WritePin</span>(GPIOB,GPIO_PIN7,GPIO_PIN_RESET);&#125;<span class="hljs-keyword">while</span>(<span class="hljs-number">0</span>)<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><span class="hljs-comment">//初始化函数</span></span><br><span class="hljs-function">    </span>&#123;<br>        GPIO_InitTypeDef gpio_init_struct;<br>        <br>    <span class="hljs-comment">/*首先是初始化这两个IO口，SCL配置为推挽输出，SDA配置为开漏输出（这样保证无论在哪种通信下，都不需要去切换IO口的     方向，因为开漏输出也可以读取IO的电平）*/</span><br>        <br>        ...配置省略<br>            <br>    <span class="hljs-built_in">HAL_GPIO_Init</span>(GPIOB, &amp;gpio_init_struct);<br>    <span class="hljs-built_in">stop</span>();<span class="hljs-comment">//初始化后先停止</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">start</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><span class="hljs-comment">//起始信号</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">/*SCL为高时，SDA从高到低的跳变产生开始信号*/</span><br>        <span class="hljs-built_in">SDA</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">delay_us</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">SCL</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">delay_us</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">SDA</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">delay_us</span>(<span class="hljs-number">2</span>);<br>        <br>        <span class="hljs-built_in">SCL</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//这个操作是钳住IIC总线，准备接受或者发送数据</span><br>        <span class="hljs-built_in">delay_us</span>(<span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">stop</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><span class="hljs-comment">//停止信号</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">/*SCL为高时，SDA从低到高的跳变产生结束信号*/</span><br>        <span class="hljs-built_in">SDA</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">delay_us</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">SCL</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">delay_us</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">SDA</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">delay_us</span>(<span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">master_ack</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><span class="hljs-comment">//主机应答信号</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">SDA</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">delay_us</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">SCL</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">delay_us</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">SCL</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">delay_us</span>(<span class="hljs-number">2</span>);<br>        <br>        <span class="hljs-built_in">SDA</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//释放总线</span><br>        <span class="hljs-built_in">delay_us</span>(<span class="hljs-number">2</span>);      <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">master_nack</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><span class="hljs-comment">//主机不应答信号</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">SDA</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">delay_us</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">SCL</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">delay_us</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">SCL</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">delay_us</span>(<span class="hljs-number">2</span>);     <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">uint8_t</span> <span class="hljs-title">slave_ack</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">uint8_t</span> timeout;<br>        <span class="hljs-type">uint8_t</span> res=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">SDA</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//主机释放总线，此时丛机可以操作SDA线</span><br>        <span class="hljs-built_in">delay_us</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">SCL</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//拉高时钟线，可以传输数据了</span><br>        <span class="hljs-built_in">delay_us</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">while</span>(<span class="hljs-built_in">HAL_GPIO_ReadPin</span>(GPIOB,GPIO_PIN_7))<span class="hljs-comment">//等待SDA线的电平被从机拉低</span><br>        &#123;<br>            timeout++;<br>            <span class="hljs-keyword">if</span>(timeout&gt;<span class="hljs-number">250</span>)<br>            &#123;<br>                <span class="hljs-built_in">stop</span>();<span class="hljs-comment">//超时</span><br>                res=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">SCL</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">delay_us</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">iic_send</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> data)</span><span class="hljs-comment">//发送8位数据</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">uint8_t</span> i;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i++)<br>        &#123;<br>            <span class="hljs-built_in">SDA</span>((data&amp;<span class="hljs-number">0x80</span>)&gt;&gt;<span class="hljs-number">7</span>);<span class="hljs-comment">//因为IIC是先传输最高位的</span><br>            <span class="hljs-built_in">delay_us</span>(<span class="hljs-number">2</span>);<br>            <span class="hljs-built_in">SCL</span>(<span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">delay_us</span>(<span class="hljs-number">2</span>);<br>            <span class="hljs-built_in">SCL</span>(<span class="hljs-number">0</span>);<br>            <span class="hljs-built_in">delay_us</span>(<span class="hljs-number">2</span>);<br>            data&lt;&lt;=<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-built_in">SDA</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//释放总线</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">uint8_t</span> <span class="hljs-title">iic_read</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> ack)</span><span class="hljs-comment">//读取8位数据   </span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">uint8_t</span> res;<br>        <span class="hljs-type">uint8_t</span> i;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i++)<br>        &#123;<br>            res&lt;&lt;=<span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">SCL</span>(<span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">delay_us</span>(<span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">HAL_GPIO_ReadPin</span>(GPIOB,GPIO_PIN_7)<br>               &#123;<br>                   res++;<br>               &#125;<br>            <span class="hljs-built_in">SCL</span>(<span class="hljs-number">0</span>);<br>      <span class="hljs-built_in">delay_us</span>(<span class="hljs-number">2</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!ack)<br>        &#123;<br>             <span class="hljs-built_in">master_nack</span>();      <br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>             <span class="hljs-built_in">master_ack</span>();       <br>        &#125;<br>        <span class="hljs-keyword">return</span> res;       <br>    &#125; <br>    /-&gt;CODEEND<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>情况二：硬件IIC，用HAL库函数实现（F1系列HAL库硬件IIC可能会有BUG）;</p><ul><li><pre><code class="c">/////////////////////////I2C_HandleTypeDef handle_iic    void iic_init(void)//硬件IIC初始化函数&#123;    /*具体句柄配置省略，设置i2c速度、模式、丛机地址位数等等*/    ...省略代码        HAL_I2C_Iint(&amp;handle_iic);/*这是IIC的初始化，还需要对应GPIO的初始化，这个函数内部会调用HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)这个函数*/&#125;void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)&#123;    GPIO_InitTypeDef GPIO_InitStruct = &#123;0&#125;;    if(hi2c-&gt;I2C1)    &#123;        ...具体GPIO配置省略        HAL_GPIO_Init();        __HAL_RCC_I2C1_CLK_ENABLE();        HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);        HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);        HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);        HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);    &#125;&#125;/*HAL库提供三种类型读写函（阻塞、非阻塞（其中包括中断和DMA））*///阻塞IIC发送、接受代码原型HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout);HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout);HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout);//非阻塞普通中断IIC发送、接受代码原型HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size);HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size);HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);//非阻塞DMA中断IIC发送、接受代码原型HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size);HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size);HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);/-&gt;CODEEND<figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs wren"><br><span class="hljs-operator">-</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span>通过硬件<span class="hljs-variable">IIC</span>读取<span class="hljs-variable">AT24C02</span>代码<span class="hljs-operator">*</span><span class="hljs-operator">*</span><br><br>  <span class="hljs-operator">-</span> ```<span class="hljs-variable">c</span><br>    <span class="hljs-comment">/* USER CODE BEGIN PV */</span><br>    <span class="hljs-comment">//AT24Cxx这是一个IIC接口的EEPROM存储芯片</span><br>    <span class="hljs-comment">//读写地址</span><br>    <span class="hljs-comment">#define AT24C02_Write 0xA0</span><br>    <span class="hljs-comment">#define AT24C02_Read  0xA1</span><br>    <span class="hljs-comment">//三次写入的字符串</span><br>    <span class="hljs-variable">unsigned</span> <span class="hljs-variable">char</span> <span class="hljs-variable">str1</span>[]<span class="hljs-operator">=</span>&#123;<span class="hljs-string">&quot;xyz666&quot;</span>&#125;;<br>    <span class="hljs-variable">unsigned</span> <span class="hljs-variable">char</span> <span class="hljs-variable">str2</span>[]<span class="hljs-operator">=</span>&#123;<span class="hljs-string">&quot;1234567&quot;</span>&#125;;<br>    <span class="hljs-variable">unsigned</span> <span class="hljs-variable">char</span> <span class="hljs-variable">str3</span>[]<span class="hljs-operator">=</span>&#123;<span class="hljs-string">&quot;abcdefg&quot;</span>&#125;;<br>    <span class="hljs-comment">//读取缓存区</span><br>    <span class="hljs-variable">uint8_t</span> <span class="hljs-title class_">ReadBuffer</span>[<span class="hljs-number">50</span>];<br>    <span class="hljs-comment">/* USER CODE END PV */</span><br>      <span class="hljs-comment">/* USER CODE BEGIN 2 */</span><br>    <span class="hljs-title function_">HAL_UART_Transmit_IT</span>(<span class="hljs-operator">&amp;</span><span class="hljs-variable">huart1</span>,<span class="hljs-string">&quot;Init Ok!<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>&quot;</span>,<span class="hljs-title function_">sizeof</span>(<span class="hljs-string">&quot;Init Ok!<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>&quot;</span>));<br>    <span class="hljs-title function_">HAL_Delay</span>(<span class="hljs-number">100</span>);<br>    <span class="hljs-comment">//阻塞方式写入读取</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_">HAL_I2C_Mem_Write</span>(<span class="hljs-operator">&amp;</span><span class="hljs-variable">hi2c1</span>,<span class="hljs-variable">AT24C02_Write</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">I2C_MEMADD_SIZE_8BIT</span>,<span class="hljs-variable">str1</span>,<span class="hljs-title function_">sizeof</span>(<span class="hljs-variable">str1</span>),<span class="hljs-number">1000</span>)<span class="hljs-operator">==</span><span class="hljs-variable">HAL_OK</span>)<br>    <span class="hljs-title function_">HAL_UART_Transmit_IT</span>(<span class="hljs-operator">&amp;</span><span class="hljs-variable">huart1</span>,<span class="hljs-string">&quot;STR1_Write_OK<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>&quot;</span>,<span class="hljs-title function_">sizeof</span>(<span class="hljs-string">&quot;STR1_Write_OK<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>&quot;</span>));<br>    <span class="hljs-title function_">HAL_Delay</span>(<span class="hljs-number">1000</span>);<br>    <span class="hljs-title function_">HAL_I2C_Mem_Read</span>(<span class="hljs-operator">&amp;</span><span class="hljs-variable">hi2c1</span>,<span class="hljs-variable">AT24C02_Read</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">I2C_MEMADD_SIZE_8BIT</span>,<span class="hljs-title class_">ReadBuffer</span>,<span class="hljs-title function_">sizeof</span>(<span class="hljs-variable">str1</span>),<span class="hljs-number">1000</span>);<br>    <span class="hljs-title function_">HAL_Delay</span>(<span class="hljs-number">1000</span>);<br>    <span class="hljs-title function_">HAL_UART_Transmit_IT</span>(<span class="hljs-operator">&amp;</span><span class="hljs-variable">huart1</span>,<span class="hljs-title class_">ReadBuffer</span>,<span class="hljs-title function_">sizeof</span>(<span class="hljs-variable">str1</span>));<br>    <span class="hljs-title function_">HAL_Delay</span>(<span class="hljs-number">1000</span>);<br>    <span class="hljs-comment">//中断方式写入读取</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_">HAL_I2C_Mem_Write_IT</span>(<span class="hljs-operator">&amp;</span><span class="hljs-variable">hi2c1</span>,<span class="hljs-variable">AT24C02_Write</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">I2C_MEMADD_SIZE_8BIT</span>,<span class="hljs-variable">str2</span>,<span class="hljs-title function_">sizeof</span>(<span class="hljs-variable">str2</span>))<span class="hljs-operator">==</span><span class="hljs-variable">HAL_OK</span>)<br>    <span class="hljs-title function_">HAL_UART_Transmit_IT</span>(<span class="hljs-operator">&amp;</span><span class="hljs-variable">huart1</span>,<span class="hljs-string">&quot;STR2_Write_OK<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>&quot;</span>,<span class="hljs-title function_">sizeof</span>(<span class="hljs-string">&quot;STR2_Write_OK<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>&quot;</span>));<br>    <span class="hljs-title function_">HAL_Delay</span>(<span class="hljs-number">1000</span>);<br>    <span class="hljs-title function_">HAL_I2C_Mem_Read_IT</span>(<span class="hljs-operator">&amp;</span><span class="hljs-variable">hi2c1</span>,<span class="hljs-variable">AT24C02_Read</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">I2C_MEMADD_SIZE_8BIT</span>,<span class="hljs-title class_">ReadBuffer</span>,<span class="hljs-title function_">sizeof</span>(<span class="hljs-variable">str2</span>));<br>    <span class="hljs-title function_">HAL_Delay</span>(<span class="hljs-number">1000</span>);<br>    <span class="hljs-title function_">HAL_UART_Transmit_IT</span>(<span class="hljs-operator">&amp;</span><span class="hljs-variable">huart1</span>,<span class="hljs-title class_">ReadBuffer</span>,<span class="hljs-title function_">sizeof</span>(<span class="hljs-variable">str2</span>));<br>    <span class="hljs-title function_">HAL_Delay</span>(<span class="hljs-number">1000</span>);<br>    <span class="hljs-comment">//DMA中断方式写入读取</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_">HAL_I2C_Mem_Write_DMA</span>(<span class="hljs-operator">&amp;</span><span class="hljs-variable">hi2c1</span>,<span class="hljs-variable">AT24C02_Write</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">I2C_MEMADD_SIZE_8BIT</span>,<span class="hljs-variable">str3</span>,<span class="hljs-title function_">sizeof</span>(<span class="hljs-variable">str3</span>))<span class="hljs-operator">==</span><span class="hljs-variable">HAL_OK</span>)<br>    <span class="hljs-title function_">HAL_UART_Transmit_IT</span>(<span class="hljs-operator">&amp;</span><span class="hljs-variable">huart1</span>,<span class="hljs-string">&quot;STR3_Write_OK<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>&quot;</span>,<span class="hljs-title function_">sizeof</span>(<span class="hljs-string">&quot;STR3_Write_OK<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>&quot;</span>));<br>    <span class="hljs-title function_">HAL_Delay</span>(<span class="hljs-number">1000</span>);<br>    <span class="hljs-title function_">HAL_I2C_Mem_Read_DMA</span>(<span class="hljs-operator">&amp;</span><span class="hljs-variable">hi2c1</span>,<span class="hljs-variable">AT24C02_Read</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">I2C_MEMADD_SIZE_8BIT</span>,<span class="hljs-title class_">ReadBuffer</span>,<span class="hljs-title function_">sizeof</span>(<span class="hljs-variable">str3</span>));<br>    <span class="hljs-title function_">HAL_Delay</span>(<span class="hljs-number">1000</span>);<br>    <span class="hljs-title function_">HAL_UART_Transmit_IT</span>(<span class="hljs-operator">&amp;</span><span class="hljs-variable">huart1</span>,<span class="hljs-title class_">ReadBuffer</span>,<span class="hljs-title function_">sizeof</span>(<span class="hljs-variable">str3</span>));<br>    <span class="hljs-title function_">HAL_Delay</span>(<span class="hljs-number">1000</span>);<br>      <span class="hljs-comment">/* USER CODE END 2 */</span><br>    /<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span><span class="hljs-variable">CODEEND</span><br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h1 id="3、串行外设接口（SPI）"><a href="#3、串行外设接口（SPI）" class="headerlink" title="3、串行外设接口（SPI）"></a>3、串行外设接口（SPI）</h1><h2 id="3-1简介"><a href="#3-1简介" class="headerlink" title="3.1简介"></a>3.1简介</h2><ul><li>SPI，是一<strong>种高速的，全双工，同步</strong>的通信总线，并且在芯片的管脚上只占用四根线。SPI分为主、从两种模式，一个SPI通讯系统需要包含一个（且只能是一个）主设备，一个或多个从设备。提供时钟的为主设备（Master），接收时钟的设备为从设备（Slave），SPI接口的读写操作，都是由主设备发起。当存在多个从设备时，通过各自的片选信号进行管理。</li><li>4线SPI示意图<ul><li><img src="/./../photo/4%E7%BA%BFSPI%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="示意图"></li><li><strong>MISO</strong>： <strong>主设备输入&#x2F;从设备输出引脚</strong>。该引脚在从模式下发送数据，在主模式下接收数据。</li><li><strong>MOSI</strong>： <strong>主设备输出&#x2F;从设备输入引脚</strong>。该引脚在主模式下发送数据，在从模式下接收数据。</li><li><strong>SCLK</strong>：<strong>串行时钟信号</strong>，由主设备产生。</li><li><strong>CS&#x2F;SS</strong>：<strong>从设备片选信号</strong>，由主设备控制。它的功能是用来作为“片选引脚”，也<strong>就是选择指定的从设备</strong>，让主设备可以单独地与特定从设备通讯，避免数据线上的冲突。</li></ul></li><li>SPI工作原理<ul><li>在主机和从机都有一个串行移位寄存器，主机通过向它的 SPI 串行寄存 器写入一个字节来发起一次传输。串行移位寄存器通过 MOSI 信号线将字节传送给从机，从机 也将自己的串行移位寄存器中的内容通过 MISO 信号线返回给主机。这样，两个移位寄存器中 的内容就被交换。外设的写操作和读操作是同步完成的。<strong>如果只是进行写操作，主机只需忽略 接收到的字节。反之，若主机要读取从机的一个字节，就必须发送一个空字节引发从机传输。</strong></li></ul></li><li>SPI传输方式<ul><li><strong>SPI总共有三种传输方式：全双工、单工以及半双工传输方式。</strong></li></ul></li></ul><h2 id="3-2工作时序"><a href="#3-2工作时序" class="headerlink" title="3.2工作时序"></a>3.2工作时序</h2><ul><li><p>SPI四种不同工作模式由CPOL(时钟极性)和CPHA（时钟相位）来控制</p><ul><li><table><thead><tr><th align="center">SPI工作模式</th><th align="center">CPOL</th><th align="center">CPHA</th><th align="center">SCL空闲状态</th><th align="center">采样边沿</th><th align="center">采样时刻</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">低电平</td><td align="center">上升沿</td><td align="center">奇数边沿</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">低电平</td><td align="center">下降沿</td><td align="center">偶数边沿</td></tr><tr><td align="center">2</td><td align="center">1</td><td align="center">0</td><td align="center">高电平</td><td align="center">下降沿</td><td align="center">奇数边沿</td></tr><tr><td align="center">3</td><td align="center">1</td><td align="center">1</td><td align="center">高电平</td><td align="center">上升沿</td><td align="center">偶数边沿</td></tr></tbody></table></li><li><p>以CPOL&#x3D;0,CPHA&#x3D;0为示例时序图，其他同理</p><ul><li><img src="/./../photo/SPI%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="时序图"></li><li>由图可以看出来，在传输开始前以及传输完成后，CPOL即SCL都为低电平，表示空闲的时候SCL为低电平状态，由于采样边沿是上升沿，即在第1、3、5、7…..等这些边沿进行采样。</li></ul></li></ul></li></ul><h2 id="3-3实例操作"><a href="#3-3实例操作" class="headerlink" title="3.3实例操作"></a>3.3实例操作</h2><ul><li><p><strong>基于stm32的HAL库配置SPI</strong></p><ul><li><pre><code class="c">typedef struct&#123;  __IO uint32_t CR1;  __IO uint32_t CR2;  __IO uint32_t SR;  __IO uint32_t DR;  __IO uint32_t CRCPR;  __IO uint32_t RXCRCR;  __IO uint32_t TXCRCR;  __IO uint32_t I2SCFGR;  __IO uint32_t I2SPR;&#125; SPI_TypeDef;//这是SPI硬件包含的寄存器SPI_HandleTypeDef g_spi_handler; /* SPI2句柄 */void spi_init(void)&#123;    ....配置句柄省略    HAL_SPI_Init(&amp;g_spi_handler);/*这个只是对SPI配置，相关的引脚配置在    HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)里面配置，这个函数会被HAL_SPI_Init()内部调用    HAL_SPI_MspInit()这个函数是个弱定义函数*/    __HAL_SPI_ENABLE(&amp;g_spi_handler);&#125;void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)&#123;    GPIO_InitTypeDef gpio_init_struct;    if(hspi-&gt;hspi-&gt;Instance == SPI1_SPI)//以SPI1为例子    &#123;        ...引脚相关配置省略        HAL_GPIO_Init(GPIOX,&amp;gpio_init_struct)    &#125;&#125;void spi_set_speed(uint8_t speed)&#123;    assert_param(IS_SPI_BAUDRATE_PRESCALER(speed)); /* 判断有效性 */    __HAL_SPI_DISABLE(&amp;g_spi_handler);             /* 关闭SPI */    g_spi2_handler.Instance-&gt;CR1 &amp;= 0XFFC7;         /* 位3-5清零，用来设置波特率 *//*寄存器操作*/    g_spi2_handler.Instance-&gt;CR1 |= speed &lt;&lt; 3;     /* 设置SPI速度 */    __HAL_SPI_ENABLE(&amp;g_spi_handler);              /* 使能SPI */&#125;uint8_t spi_read_write_byte(uint8_t txdata)&#123;    uint8_t rxdata;    HAL_SPI_TransmitReceive(&amp;g_spi2_handler, &amp;txdata, &amp;rxdata, 1, 1000);/*这一个函数可以实现发送和接收*/&#125;/-&gt;CODEEND<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs arduino">    <br>  <br>- **<span class="hljs-built_in">SPI</span>-&gt;norflash存储芯片的读写**<br><br>  - ```c<br>    <span class="hljs-comment">/*仅仅介绍几个函数，具体的请参考完整代码*/</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">norflash_init</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        GPIO_InitTypeDef gpio_init_struct;<span class="hljs-comment">//主要为了配置片选引脚</span><br>        ...配置代码省略<br>        <span class="hljs-built_in">HAL_GPIO_Init</span>(GPIOX,&amp;gpio_init_struct)<br>        <span class="hljs-built_in">spi_init</span>();<br>        <span class="hljs-built_in">spi_set_speed</span>(SPI_SPEED_2);<span class="hljs-comment">//这个设置SPI速度的</span><br>        <span class="hljs-comment">/*有些flash芯片需要开启4字节地址模式*/</span>   <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">norflash_send_address</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> address)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (g_norflash_type == W25Q256) <span class="hljs-comment">/*  只有W25Q256支持4字节地址模式 */</span><br>        &#123;<br>            <span class="hljs-built_in">spi2_read_write_byte</span>((<span class="hljs-type">uint8_t</span>)((address)&gt;&gt;<span class="hljs-number">24</span>)); <span class="hljs-comment">/* 发送 bit31 ~ bit24 地址 */</span><br>        &#125; <br>        <span class="hljs-built_in">spi2_read_write_byte</span>((<span class="hljs-type">uint8_t</span>)((address)&gt;&gt;<span class="hljs-number">16</span>));     <span class="hljs-comment">/* 发送 bit23 ~ bit16 地址 */</span><br>        <span class="hljs-built_in">spi2_read_write_byte</span>((<span class="hljs-type">uint8_t</span>)((address)&gt;&gt;<span class="hljs-number">8</span>));      <span class="hljs-comment">/* 发送 bit15 ~ bit8  地址 */</span><br>        <span class="hljs-built_in">spi2_read_write_byte</span>((<span class="hljs-type">uint8_t</span>)address);             <span class="hljs-comment">/* 发送 bit7  ~ bit0  地址 */</span><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">norflash_read</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> *pbuf, <span class="hljs-type">uint32_t</span> addr, <span class="hljs-type">uint16_t</span> datalen)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">uint16_t</span> i;<br>    <br>        <span class="hljs-built_in">HAL_GPIO_WritePin</span>(GPIOX,GPIO_PIN,GPIO_PIN_RESET);<span class="hljs-comment">//拉低片选选中芯片</span><br>        <span class="hljs-built_in">spi2_read_write_byte</span>(FLASH_ReadData);       <span class="hljs-comment">/* 发送读取命令 */</span><br>        <span class="hljs-built_in">norflash_send_address</span>(addr);                <span class="hljs-comment">/* 发送地址 */</span><br>        <br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;datalen;i++)<br>        &#123;<br>            pbuf[i] = <span class="hljs-built_in">spi2_read_write_byte</span>(<span class="hljs-number">0XFF</span>);   <span class="hljs-comment">/* 循环读取 */</span><br>        &#125;<br>        <br>        <span class="hljs-built_in">HAL_GPIO_WritePin</span>(GPIOX,GPIO_PIN,GPIO_PIN_SET);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">norflash_write</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> *pbuf, <span class="hljs-type">uint32_t</span> addr, <span class="hljs-type">uint16_t</span> datalen)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">uint32_t</span> secpos;<br>        <span class="hljs-type">uint16_t</span> secoff;<br>        <span class="hljs-type">uint16_t</span> secremain;<br>        <span class="hljs-type">uint16_t</span> i;<br>        <span class="hljs-type">uint8_t</span> *norflash_buf;<br>    <br>        norflash_buf = g_norflash_buf;<br>        secpos = addr / <span class="hljs-number">4096</span>;       <span class="hljs-comment">/* 扇区地址 */</span><br>        secoff = addr % <span class="hljs-number">4096</span>;       <span class="hljs-comment">/* 在扇区内的偏移 */</span><br>        secremain = <span class="hljs-number">4096</span> - secoff;  <span class="hljs-comment">/* 扇区剩余空间大小 */</span><br>        <span class="hljs-keyword">if</span> (datalen &lt;= secremain)<br>        &#123;<br>            secremain = datalen;    <span class="hljs-comment">/* 不大于4096个字节 */</span><br>        &#125;<br>    <br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">norflash_read</span>(norflash_buf, secpos * <span class="hljs-number">4096</span>, <span class="hljs-number">4096</span>);   <span class="hljs-comment">/* 读出整个扇区的内容 */</span><br>    <br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; secremain; i++)   <span class="hljs-comment">/* 校验数据 */</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (norflash_buf[secoff + i] != <span class="hljs-number">0XFF</span>)<br>                &#123;<br>                    <span class="hljs-keyword">break</span>;      <span class="hljs-comment">/* 需要擦除, 直接退出for循环 */</span><br>                &#125;<br>            &#125;<br>    <br>            <span class="hljs-keyword">if</span> (i &lt; secremain)   <span class="hljs-comment">/* 需要擦除 */</span><br>            &#123;<br>                <span class="hljs-built_in">norflash_erase_sector</span>(secpos);  <span class="hljs-comment">/* 擦除这个扇区 */</span><br>    <br>                <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; secremain; i++)   <span class="hljs-comment">/* 复制 */</span><br>                &#123;<br>                    norflash_buf[i + secoff] = pbuf[i];<br>                &#125;<br>    <br>                <span class="hljs-built_in">norflash_write_nocheck</span>(norflash_buf, secpos * <span class="hljs-number">4096</span>, <span class="hljs-number">4096</span>);  <span class="hljs-comment">/* 写入整个扇区 */</span><br>            &#125;<br>            <span class="hljs-keyword">else</span>        <span class="hljs-comment">/* 写已经擦除了的,直接写入扇区剩余区间. */</span><br>            &#123;<br>                <span class="hljs-built_in">norflash_write_nocheck</span>(pbuf, addr, secremain);  <span class="hljs-comment">/* 直接写扇区 */</span><br>            &#125;<br>    <br>            <span class="hljs-keyword">if</span> (datalen == secremain)<br>            &#123;<br>                <span class="hljs-keyword">break</span>;  <span class="hljs-comment">/* 写入结束了 */</span><br>            &#125;<br>            <span class="hljs-keyword">else</span>        <span class="hljs-comment">/* 写入未结束 */</span><br>            &#123;<br>                secpos++;               <span class="hljs-comment">/* 扇区地址增1 */</span><br>                secoff = <span class="hljs-number">0</span>;             <span class="hljs-comment">/* 偏移位置为0 */</span><br>    <br>                pbuf += secremain;      <span class="hljs-comment">/* 指针偏移 */</span><br>                addr += secremain;      <span class="hljs-comment">/* 写地址偏移 */</span><br>                datalen -= secremain;   <span class="hljs-comment">/* 字节数递减 */</span><br>    <br>                <span class="hljs-keyword">if</span> (datalen &gt; <span class="hljs-number">4096</span>)<br>                &#123;<br>                    secremain = <span class="hljs-number">4096</span>;   <span class="hljs-comment">/* 下一个扇区还是写不完 */</span><br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    secremain = datalen;<span class="hljs-comment">/* 下一个扇区可以写完了 */</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    /-&gt;CODEEND<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p><strong>扩展</strong></p><ul><li>SPI不仅仅只有4线的，还有6线的。多出来两根数据线，这样可以一个时钟周期传输两个字节</li></ul></li></ul><h1 id="4、控制局域网总线（CAN）"><a href="#4、控制局域网总线（CAN）" class="headerlink" title="4、控制局域网总线（CAN）"></a>4、控制局域网总线（CAN）</h1><h2 id="4-1简介"><a href="#4-1简介" class="headerlink" title="4.1简介"></a>4.1简介</h2><ul><li>控制器局域网总线（CAN，Controller Area Network）是一种用于实时应用的串行通讯协议总线，它可以使用双绞线来传输信号，是世界上应用最广泛的现场总线之一。CAN协议用于汽车中各种不同元件之间的通信，以此取代昂贵而笨重的配电线束。该协议的健壮性使其用途延伸到其他自动化和工业应用。CAN协议的特性包括完整性的串行数据通讯、提供实时支持、传输速率高达1Mb&#x2F;s、同时具有11位的寻址以及检错能力。</li></ul><h2 id="4-2CAN总线结构"><a href="#4-2CAN总线结构" class="headerlink" title="4.2CAN总线结构"></a>4.2CAN总线结构</h2><ul><li><strong>闭环总线结构</strong>：如图所示，总线两端各连接一个120欧的电阻，两根信号线形成回路。这种CAN总线网络由ISO 11898标准定义，是高速、短距离的CAN网络，通信速率为125kbit&#x2F;s到1Mbit&#x2F;s。在1Mbit&#x2F;s通讯速率时，总线长度最长达40m。<ul><li><img src="/./../photo/%E9%97%AD%E7%8E%AFCAN%E7%BB%93%E6%9E%84.png" alt="总线结构图"></li></ul></li><li><strong>开环总线结构</strong>：两根信号线独立，各自串联一个2.2k欧的电阻。这种CAN总线网络由ISO11519-2标准定义，是低速、远距离的CAN网络，通信速率最高125kbit&#x2F;s。在40kbit&#x2F;s速率时，总线最长距离可达1000m。<ul><li><img src="/./../photo/%E5%BC%80%E7%8E%AF%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="示意图"></li></ul></li><li><strong>CAN总线特性</strong>：CAN总线由两根信号线，CANH和CANL，没有时钟同步信号。所以CAN是一种异步通信方式。两根信号线的电压差CANH-CANL表示CAN总线的电平，与传输的逻辑信号1或0对应。对应于逻辑1的称为隐性（Recessive）电平，对应于逻辑0成为显性（Dominant）电平。<ul><li><img src="/./../photo/%E9%80%BB%E8%BE%91%E7%94%B5%E5%B9%B3%E4%BF%A1%E5%8F%B7.png" alt="示意图"></li><li>在开环跟闭环的结构里面，隐形电平和显型电平对应的电压值略有不同</li><li>隐性电平表示逻辑1</li><li>显性电平表示逻辑0</li></ul></li><li><strong>CAN总线特点</strong>:<ul><li><strong>实时性：</strong> CAN总线具有优越的实时性能，适用于需要及时传输数据的应用，如汽车控制系统、工业自动化等。仲裁机制和帧优先级的设计保证了低延迟和可预测性。<strong>多主机系统：</strong> CAN支持多主机系统，多个节点可以同时发送和接收数据。<strong>差分信号传输：</strong> CAN使用差分信号传输，通过两个线路（CAN_H和CAN_L）之间的电压差来传递信息。这种差分传输方式提供了良好的抗干扰性能。<strong>仲裁机制：</strong> CAN总线采用非破坏性仲裁机制，通过比较消息标识符的优先级来决定哪个节点有权继续发送数据。这种机制确保了总线上数据传输的有序性，避免了冲突。<strong>广播通信：</strong> CAN总线采用广播通信方式，即发送的数据帧可以被总线上的所有节点接收。<strong>错误检测和处理：</strong>CAN总线具有强大的错误检测和处理机制。通过CRC检查和其他错误检测手段。<strong>多种帧类型：</strong>CAN总线上的节点没有地址的概念。CAN总线上的数据是以帧为单位传输的，帧又分为数据帧、遥控帧等多种帧类型，帧包含需要传输的数据或控制信息。<strong>特定标识符</strong>：每一个帧有一个标识符（Identifier，一下简称ID）。ID不是地址，它表示传输数据的类型，也可以用于总线仲裁时确定优先级。<strong>滤波特性：</strong>每个CAN节点都接收数据，但是可以对接收的帧根据ID进行过滤。<strong>半双工：</strong>CAN总线通信时半双工的，即总线不能同时发送和接收。在多个节点竞争总线进行发送时，通过ID的优先级进行仲裁。<strong>无时钟信号：</strong>CAN总线没有用于同步的时钟信号，所以需要规定CAN总线通信的波特率，所以节点都是用同样的波特率进行通信。</li></ul></li></ul><h2 id="4-3CAN通信的重点（各种帧）"><a href="#4-3CAN通信的重点（各种帧）" class="headerlink" title="4.3CAN通信的重点（各种帧）"></a>4.3CAN通信的重点（各种帧）</h2><ul><li><p>CAN网络中通信通过5种类型的帧进行的。</p><ul><li><p>5种帧类型以及用途如下表</p><ul><li><table><thead><tr><th align="left">帧类型</th><th align="left">帧用途</th></tr></thead><tbody><tr><td align="left">数据帧（Data frame）</td><td align="left">节点发送的包含ID和数据的帧，用于发送单元向接收单元传送数据的帧。</td></tr><tr><td align="left">遥控帧（Remote frame）</td><td align="left">节点向网络上的其他节点发出的某个ID的数据请求，发送节点收到遥控帧后就可以发送相应ID的数据帧</td></tr><tr><td align="left">错误帧（Error frame）</td><td align="left">节点检测出错误时，向其他节点发送的通知错误的帧</td></tr><tr><td align="left">过载帧（Overload frame）</td><td align="left">接收单元未做好接收数据的准备时发送的帧，发送节点收到过载帧后可以暂缓发送数据帧</td></tr><tr><td align="left">帧间空间（Inter-frame space）</td><td align="left">用于将数据帧、遥控帧与前后的帧分隔开的帧</td></tr></tbody></table></li></ul></li></ul></li><li><p><strong>标准格式数据帧</strong>：由7个段构成，如下图</p><ul><li><p><img src="/./../photo/CAN%E6%95%B0%E6%8D%AE%E5%B8%A7%E6%A0%BC%E5%BC%8F.png" alt="数据帧"></p><ul><li>帧起始:一位显性电平；</li><li>仲裁段禁止ID高7位全为隐性电平；</li><li>控制段，保留位r0必须以显性电平发送。DLC表示数据段的字节数</li><li>CRC段，根据多项式生成CRC校验码</li><li>ACK段：发送方的ACK发送2个位的隐性位，接收单元ACK，在ACK位发送一个显性位，通知接收正常</li><li>帧结束：7个隐性位构成。</li></ul></li></ul></li><li><p><strong>标准遥控帧</strong>：由6段构成，图示省略</p><ul><li>跟数据帧少了一个数据段<ul><li>遥控帧的RTR位为隐性位，没有数据段</li><li>遥控帧的数据长度码DLC以请求数据帧的数据长度码表示</li></ul></li></ul></li><li><p><strong>错误帧</strong>：用于在接收和发送消息时检测出错误通知错误的帧。错误帧由错误标志和错误界定符构成。如图所示</p><ul><li><img src="/./../photo/%E9%94%99%E8%AF%AF%E5%B8%A7.png" alt="错误帧"><ul><li>主动错误标志：6 个位的显性位。</li><li>被动错误标志：6 个位的隐性位。</li><li>错误界定符由 8 个位的隐性位构成。</li></ul></li></ul></li><li><p><strong>过载帧</strong>：过载帧是用于接收单元通知其尚未完成接收准备的帧。过载帧由过载标志和过载界定符构成。</p><ul><li>过载标志：6 个位的显性位。过载标志的构成与主动错误标志的构成相同。过载界定符：8 个位的隐性位。过载界定符的构成与错误界定符的构成相同。</li></ul></li><li><p><strong>帧间隔</strong>：帧间隔是用于分隔数据帧和遥控帧的帧。数据帧和遥控帧可通过插入帧间隔将本帧与前面的任何帧（数据帧、遥控帧、错误帧、过载帧）分开。</p><ul><li>间隔：3 个位的隐性位。总线空闲：隐性电平，无长度限制（0 亦可）。本状态下，可视为总线空闲，要发送的单元可开始访问总线。延迟传送（发送暂时停止）：8 个位的隐性位。只在处于被动错误状态的单元刚发送一个消息后的帧间隔中包含的段。</li></ul></li></ul><h2 id="4-4CAN总线优先级及同步"><a href="#4-4CAN总线优先级及同步" class="headerlink" title="4.4CAN总线优先级及同步"></a>4.4CAN总线优先级及同步</h2><ul><li><p><strong>优先级决定</strong>：在总线空闲态，最先开始发送消息的单元获得发送权。多个单元同时开始发送时，各发送单元从仲裁段的第一位开始进行仲裁。连续输出显性电平最多的单元可继续发送。</p></li><li><p><strong>数据帧和遥控帧的优先级</strong>：具有相同 ID 的数据帧和遥控帧在总线上竞争时，仲裁段的最后一位（RTR）为显性位的数据帧具有优先权，可继续发送。</p></li><li><p><strong>CAN通信错误种类</strong>：如下表</p><ul><li><img src="/./../photo/CAN%E9%80%9A%E4%BF%A1%E9%94%99%E8%AF%AF.png" alt="错误表"></li></ul></li><li><p><strong>位时序</strong>：由发送单元在非同步的情况下发送的每秒钟的位数称为位速率。一个位可分为 4 段。同步段（SS）传播时间段（PTS）</p><p>相位缓冲段 1（PBS1）相位缓冲段 2（PBS2）这些段又由可称为 Time Quantum（以下称为 Tq）的最小时间单位构成。</p></li><li><p><strong>CAN通信同步的方法</strong>：CAN 协议的通信方法为 NRZ（Non-Return to Zero）方式。各个位的开头或者结尾都没有附加同步信号。发送单元以与位时序同步的方式开始发送数据。另外，接收单元根据总线上电平的变化进行同步并进行接收工作。但是，发送单元和接收单元存在的时钟频率误差及传输路径上的（电缆、驱动器等）相位延迟会引起同步偏差。因此接收单元通过硬件同步或者再同步的方法调整时序进行接收。</p></li></ul><h2 id="4-5CAN实例操作"><a href="#4-5CAN实例操作" class="headerlink" title="4.5CAN实例操作"></a>4.5CAN实例操作</h2><ul><li><p>基于stm32的CAN通信</p><ul><li><p>CAN 发送流程为：程序选择 1 个空置的邮箱（TME&#x3D;1）→设置标识符（ID），数据长度和 发送数据→设置 CAN_TIxR 的 TXRQ 位为 1，请求发送→邮箱挂号（等待成为最高优先级）→ 预定发送（等待总线空闲）→发送→邮箱空置。</p></li><li><p>CAN 接收到的有效报文，被存储在 3 级邮箱深度的 FIFO 中。CAN 接收流程为：FIFO 空→收到有效报文→挂号1（存入 FIFO 的一个邮箱，这个由硬件 控制，我们不需要理会）→收到有效报文→挂号2→收到有效报文→挂号_3→收到有效报文溢 出。</p></li><li><p>重点是构造发送的数据消息，跟接收的数据消息配置。</p></li><li><p>并且配置的时候有多种模式可选择，比如回环模式和正常模式</p></li><li><pre><code class="c">/*HAL库配置CAN控制器,简略代码，列出关键,以CAN1为例子*/CAN_HandleTypeDef   g_canx_handler;     /* CANx句柄 */CAN_TxHeaderTypeDef g_canx_txheader;    /* 发送参数句柄 */CAN_RxHeaderTypeDef g_canx_rxheader;    /* 接收参数句柄 */void can_init(uint32_t tsjw, uint32_t tbs2, uint32_t tbs1, uint16_t brp, uint32_t mode)&#123;    /*CAN的各种配置*/    ...代码省略    HAL_CAN_Init(&amp;g_canx_handler);//HAL_CAN_Init()-&gt;内部调用HAL_CAN_MspInit()    /*配置CAN的过滤操作*/    CAN_FilterTypeDef sFilterConfig;    ...配置过程省略    HAL_CAN_ConfigFilter(&amp;g_canx_handler, &amp;sFilterConfig)    &#125;void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)//用来配置CAN相关的引脚的状态&#123;    if (CAN1 == hcan-&gt;Instance)    &#123;        __HAL_RCC_GPIOX_CLK_ENABLE();        __HAL_RCC_CAN1_CLK_ENABLE();        GPIO_InitTypeDef gpio_initure;        ...具体配置省略        HAL_GPIO_Init(GPIOX, &amp;gpio_initure);    &#125;&#125;uint8_t can_send_msg(uint32_t id, uint8_t *msg, uint8_t len)&#123;      uint32_t TxMailbox = CAN_TX_MAILBOX0;          g_canx_txheader.StdId = id;         /* 标准标识符 */      g_canx_txheader.ExtId = id;         /* 扩展标识符(29位) 标准标识符情况下，该成员无效*/      g_canx_txheader.IDE = CAN_ID_STD;   /* 使用标准标识符 */      g_canx_txheader.RTR = CAN_RTR_DATA; /* 数据帧 */      g_canx_txheader.DLC = len;  if (HAL_CAN_AddTxMessage(&amp;g_canx_handler, &amp;g_canx_txheader, msg, &amp;TxMailbox) != HAL_OK) /* 发送消息 */  &#123;    return 1;  &#125;    while (HAL_CAN_GetTxMailboxesFreeLevel(&amp;g_canx_handler) != 3); /* 等待发送完成,所有邮箱(有三个邮箱)为空 */    return 0;&#125;uint8_t can_receive_msg(uint32_t id, uint8_t *buf)&#123;  if (HAL_CAN_GetRxFifoFillLevel(&amp;g_canx_handler, CAN_RX_FIFO0) == 0)     /* 没有接收到数据 */  &#123;    return 0;  &#125;  if (HAL_CAN_GetRxMessage(&amp;g_canx_handler, CAN_RX_FIFO0, &amp;g_canx_rxheader, buf) != HAL_OK)  /* 读取数据 */  &#123;    return 0;  &#125;    if (g_canx_rxheader.StdId!= id || g_canx_rxheader.IDE != CAN_ID_STD || g_canx_rxheader.RTR != CAN_RTR_DATA)       /* 接收到的ID不对 / 不是标准帧 / 不是数据帧 */  &#123;    return 0;      &#125;  return g_canx_rxheader.DLC;&#125;/-&gt;CODEEND</code></pre></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
