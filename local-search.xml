<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>textnum</title>
    <link href="/2024/04/25/textnum/"/>
    <url>/2024/04/25/textnum/</url>
    
    <content type="html"><![CDATA[<p>上传上去没</p><h1 id="2、集成电路总线-IIC"><a href="#2、集成电路总线-IIC" class="headerlink" title="2、集成电路总线(IIC)"></a>2、集成电路总线(IIC)</h1><h2 id="2-1简介"><a href="#2-1简介" class="headerlink" title="2.1简介"></a>2.1简介</h2><ul><li>IIC使用两根信号线进行通信：一根时钟线SCL，一根数据线SDA。IIC将SCL处于高时SDA拉低的动作作为开始信号，SCL处于高时SDA拉高的动作作为结束信号；传输数据时，SDA在SCL低电平时改变数据，在SCL高电平时保持数据，每个SCL脉冲的高电平传递1位数据。IIC是半双工同步通信协议</li></ul><h2 id="2-2总线特性与硬件结构"><a href="#2-2总线特性与硬件结构" class="headerlink" title="2.2总线特性与硬件结构"></a>2.2总线特性与硬件结构</h2><ul><li><p>IIC总线上所有器件的SDA、SCL引脚输出驱动都为 <strong>开漏(OD)</strong> 结构，通过外接上拉电阻实现总线上所有节点SDA、SCL信号的<strong>线与</strong>逻辑关系；</p></li><li><p>总线上的所有设备通过软件寻址且具有唯一的地址（7位或10位）。7位“从机专用地址码”，其高4位为由生产厂家制定的<strong>设备类型地址</strong>，低3位为器件引脚定义地址（由使用者定义）；10位地址不常见；</p></li><li><p>支持多主机。在总线上存在多个主机时，通过冲突检测和仲裁机制防止多个主机同时发起数据传输时存在的冲突；</p></li><li><p>通信模式</p><ul><li><table><thead><tr><th align="center">模式</th><th align="center">速度</th></tr></thead><tbody><tr><td align="center">标准模式（Standard Mode）</td><td align="center">100kb&#x2F;s</td></tr><tr><td align="center">快速模式（Fast Mode）</td><td align="center">400kb&#x2F;s</td></tr><tr><td align="center">增强快速模式（Fast Mode Plus）</td><td align="center">1Mb&#x2F;s</td></tr><tr><td align="center">高速模式（High Speed Mode）</td><td align="center">3.4Mb&#x2F;s</td></tr><tr><td align="center">极速模式（Ultra-FastMode）</td><td align="center">5Mb&#x2F;s</td></tr></tbody></table></li></ul></li><li><p>硬件结构</p><ul><li>IIC使用两根信号线进行通信，要求两根线都使用 <strong>开漏输出接上拉电阻</strong> 的配置，以此实现总线上所有节点SDA、SCL信号的 <strong>线与</strong> 逻辑关系。</li><li><img src="E:\Blog\source\_posts\嵌入式常见协议总结\IIC总线结构体图.png" alt="总线结构图" style="zoom:80%;" /></li><li>IIC允许一对多通信，但是同一时间只能有一个丛机跟主机通信</li></ul></li></ul><h2 id="2-3工作时序"><a href="#2-3工作时序" class="headerlink" title="2.3工作时序"></a>2.3工作时序</h2><ul><li><strong>数据有效性以及采集过程</strong><ul><li>IIC 的数据读取动作都在 <strong>SCL为高</strong> 时产生，<strong>SCL为低</strong>时是数据改变的时期，无论SDA如何变化都不影响读取。所以，传输数据的过程中，当SCL为高时，数据应当保持稳定，避免数据的采集出错。</li></ul></li><li><strong>开始和结束信号</strong><ul><li><strong>开始信号：</strong>SCL为高时，SDA从高到低的跳变产生开始信号</li><li><strong>结束信号：</strong>SCL为高时，SDA从低到高的跳变产生结束信号</li></ul></li><li><strong>重复开始信号（ReSTART&#x2F;Sr）：</strong> 在结束时不给出STOP信号，而以一个时钟周期内再次给出开始信号作为替代</li><li><strong>字节格式：</strong>SDA数据线上的每个字节<strong>必须是8位</strong>，对于每次传输的<strong>字节数没有限制</strong>。每个字节（8位）数据传送完后紧跟着应答信号（ACK，第9位）。数据的先后顺序为：<strong>高位在前</strong> 。</li><li><strong>应答信号（ACK）：</strong>协议规定数据传输过程必须包含应答（ACK）。接收器通过应答告知发送的字节已被成功接收，之后发送器可以进行下一个字节的传输。<strong>主机产生数据传输过程中的所有时钟，包括用于应答的第9个时钟。发送器在应答时钟周期内释放对SDA总线的控制，</strong>这样接收器可以通过将SDA线拉低告知发送器：数据已被成功接收。（<strong>特别注意，ACK信号是主机发送完数据后，必须必须释放SDA总线后，丛机来控制SDA总线发出的信号</strong>）<ul><li>应答信号分为两种：<ul><li>当第9位(应答位)为 <strong>低电平</strong> 时，为 <strong>ACK</strong> 信号</li><li>当第9位(应答位)为 <strong>高电平</strong> 时，为 <strong>NACK</strong>信号</li></ul></li></ul></li></ul><h2 id="2-4地址设备为7位的通信过程"><a href="#2-4地址设备为7位的通信过程" class="headerlink" title="2.4地址设备为7位的通信过程"></a>2.4地址设备为7位的通信过程</h2><ul><li>完整通信示意图：<ul><li><img src="E:\Blog\source\_posts\嵌入式常见协议总结\7bit设备地址通信示意图.png" alt="示意图" style="zoom:80%;" /></li><li><strong>START信号后，第一个字节包含设备7位地址以及1位读写位，读写位表示主机将要对丛机进行的操作。发送完这个字节之后，主机释放SDA总线等待从机给出ACK应答。如果从机给出了ACK应答，表示从机地址正确（有从机响应）并且已知晓是读还是写，便可以开始读写数据。如果从机没有给出ACK应答，则说明接收设备可能没有收到数据（如寻址的设备不存在或是设备正在忙碌）或无法解析收到的数据，如果是这样，则由主机来决定如何处理（STOP或ReSTART）。</strong><ul><li>情况一：主机写，丛机收，传输过程传输方向不变<ul><li><img src="E:\Blog\source\_posts\嵌入式常见协议总结\主发丛收.png" alt="示意图" style="zoom:80%;" /></li></ul></li><li>情况二：主机收，丛机发送，传输过程传输方向改变<ul><li><img src="E:\Blog\source\_posts\嵌入式常见协议总结\主收丛发.png" alt="示意图" style="zoom:80%;" /></li></ul></li></ul></li></ul></li></ul><h2 id="2-4实例操作"><a href="#2-4实例操作" class="headerlink" title="2.4实例操作"></a>2.4实例操作</h2><ul><li><p><strong>基于stm32的IIC操作</strong></p><ul><li><p>情况一：用GPIO来模拟IIC通信过程</p><ul><li><pre><code class="c">/*以F103为例子，SCL--&gt;PB6,SDA--&gt;PB7，精简代码，不是所有都列出来*/#define SCL(x)do&#123;x? HAL_GPIO_WritePin(GPIOB,GPIO_PIN6,GPIO_PIN_SET):                     \HAL_GPIO_WritePin(GPIOB,GPIO_PIN6,GPIO_PIN_RESET);&#125;while(0)#define SDA(x)do&#123;x? HAL_GPIO_WritePin(GPIOB,GPIO_PIN7,GPIO_PIN_SET):                     \HAL_GPIO_WritePin(GPIOB,GPIO_PIN7,GPIO_PIN_RESET);&#125;while(0)void init(void)//初始化函数&#123;    GPIO_InitTypeDef gpio_init_struct;        /*首先是初始化这两个IO口，SCL配置为推挽输出，SDA配置为开漏输出（这样保证无论在哪种通信下，都不需要去切换IO口的     方向，因为开漏输出也可以读取IO的电平）*/        ...配置省略            HAL_GPIO_Init(GPIOB, &amp;gpio_init_struct);    stop();//初始化后先停止&#125;void start(void)//起始信号&#123;    /*SCL为高时，SDA从高到低的跳变产生开始信号*/    SDA(1);    delay_us(2);    SCL(1);    delay_us(2);    SDA(0);    delay_us(2);        SCL(0);//这个操作是钳住IIC总线，准备接受或者发送数据    delay_us(2);&#125;void stop(void)//停止信号&#123;    /*SCL为高时，SDA从低到高的跳变产生结束信号*/    SDA(0);    delay_us(2);    SCL(1);    delay_us(2);    SDA(1);    delay_us(2);&#125;void master_ack(void)//主机应答信号&#123;    SDA(0);    delay_us(2);    SCL(1);    delay_us(2);    SCL(0);    delay_us(2);        SDA(1);//释放总线    delay_us(2);      &#125;void master_nack(void)//主机不应答信号&#123;    SDA(1);    delay_us(2);    SCL(1);    delay_us(2);    SCL(0);    delay_us(2);     &#125;uint8_t slave_ack(void)&#123;    uint8_t timeout;    uint8_t res=0;    SDA(1);//主机释放总线，此时丛机可以操作SDA线    delay_us(2);    SCL(1);//拉高时钟线，可以传输数据了    delay_us(2);    while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7))//等待SDA线的电平被从机拉低    &#123;        timeout++;        if(timeout&gt;250)        &#123;            stop();//超时            res=1;            break;        &#125;    &#125;    SCL(0);    delay_us(2);    return res;&#125;void iic_send(uint8_t data)//发送8位数据&#123;    uint8_t i;    for(i=0;i&lt;8;i++)    &#123;        SDA((data&amp;0x80)&gt;&gt;7);//因为IIC是先传输最高位的        delay_us(2);        SCL(1);        delay_us(2);        SCL(0);        delay_us(2);        data&lt;&lt;=1;    &#125;    SDA(1);//释放总线&#125;uint8_t iic_read(uint8_t ack)//读取8位数据   &#123;    uint8_t res;    uint8_t i;    for(i=0;i&lt;8;i++)    &#123;        res&lt;&lt;=1;        SCL(1);        delay_us(2);        if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7)           &#123;               res++;           &#125;        SCL(0);          delay_us(2);    &#125;    if(!ack)    &#123;         master_nack();          &#125;    else    &#123;         master_ack();           &#125;    return res;       &#125;<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br>- 情况二：硬件IIC，用HAL库函数实现（F1系列HAL库硬件IIC可能会有BUG）<br><br>  - ```<span class="hljs-function">c</span><br><span class="hljs-function">    I2C_HandleTypeDef handle_iic</span><br><span class="hljs-function">    <span class="hljs-type">void</span> <span class="hljs-title">iic_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><span class="hljs-comment">//硬件IIC初始化函数</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">/*具体句柄配置省略，设置i2c速度、模式、丛机地址位数等等*/</span><br>        ...省略代码<br>        <span class="hljs-built_in">HAL_I2C_Iint</span>(&amp;handle_iic);<span class="hljs-comment">/*这是IIC的初始化，还需要对应GPIO的初始化，这个函数内部会调用HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)这个函数*/</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HAL_I2C_MspInit</span><span class="hljs-params">(I2C_HandleTypeDef* hi2c)</span></span><br><span class="hljs-function">    </span>&#123;<br>        GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">if</span>(hi2c-&gt;I2C1)<br>        &#123;<br>           ...具体GPIO配置省略<br>           <span class="hljs-built_in">HAL_GPIO_Init</span>();<br>           __HAL_RCC_I2C1_CLK_ENABLE();<br>           <span class="hljs-built_in">HAL_NVIC_SetPriority</span>(I2C1_EV_IRQn, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>           <span class="hljs-built_in">HAL_NVIC_EnableIRQ</span>(I2C1_EV_IRQn);<br>           <span class="hljs-built_in">HAL_NVIC_SetPriority</span>(I2C1_ER_IRQn, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>           <span class="hljs-built_in">HAL_NVIC_EnableIRQ</span>(I2C1_ER_IRQn);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/*HAL库提供三种类型读写函（阻塞、非阻塞（其中包括中断和DMA））*/</span><br>    <span class="hljs-comment">//阻塞IIC发送、接受代码原型</span><br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Master_Transmit</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size, <span class="hljs-type">uint32_t</span> Timeout)</span></span>;<br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Master_Receive</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size, <span class="hljs-type">uint32_t</span> Timeout)</span></span>;<br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Mem_Write</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint16_t</span> MemAddress, <span class="hljs-type">uint16_t</span> MemAddSize, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size, <span class="hljs-type">uint32_t</span> Timeout)</span></span>;<br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Mem_Read</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint16_t</span> MemAddress, <span class="hljs-type">uint16_t</span> MemAddSize, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size, <span class="hljs-type">uint32_t</span> Timeout)</span></span>;<br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_IsDeviceReady</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint32_t</span> Trials, <span class="hljs-type">uint32_t</span> Timeout)</span></span>;<br>    <br>    <span class="hljs-comment">//非阻塞普通中断IIC发送、接受代码原型</span><br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Master_Transmit_IT</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size)</span></span>;<br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Master_Receive_IT</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size)</span></span>;<br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Mem_Write_IT</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint16_t</span> MemAddress, <span class="hljs-type">uint16_t</span> MemAddSize, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size)</span></span>;<br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Mem_Read_IT</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint16_t</span> MemAddress, <span class="hljs-type">uint16_t</span> MemAddSize, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size)</span></span>;<br>    <br>    <span class="hljs-comment">//非阻塞DMA中断IIC发送、接受代码原型</span><br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Master_Transmit_DMA</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size)</span></span>;<br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Master_Receive_DMA</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size)</span></span>;<br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Mem_Write_DMA</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint16_t</span> MemAddress, <span class="hljs-type">uint16_t</span> MemAddSize, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size)</span></span>;<br>    <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Mem_Read_DMA</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint16_t</span> MemAddress, <span class="hljs-type">uint16_t</span> MemAddSize, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size)</span></span>;<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li><li><p><strong>通过硬件IIC读取AT24C02代码</strong></p><ul><li><p>AT24Cxx这是一个IIC接口的EEPROM存储芯片</p><ul><li><pre><code class="c">/* USER CODE BEGIN PV *///读写地址#define AT24C02_Write 0xA0#define AT24C02_Read  0xA1//三次写入的字符串unsigned char str1[]=&#123;&quot;xyz666&quot;&#125;;unsigned char str2[]=&#123;&quot;1234567&quot;&#125;;unsigned char str3[]=&#123;&quot;abcdefg&quot;&#125;;//读取缓存区uint8_t ReadBuffer[50];/* USER CODE END PV */  /* USER CODE BEGIN 2 */    HAL_UART_Transmit_IT(&amp;huart1,&quot;Init Ok!\r\n&quot;,sizeof(&quot;Init Ok!\r\n&quot;));    HAL_Delay(100);    //阻塞方式写入读取    if(HAL_I2C_Mem_Write(&amp;hi2c1,AT24C02_Write,0,I2C_MEMADD_SIZE_8BIT,str1,sizeof(str1),1000)==HAL_OK)    HAL_UART_Transmit_IT(&amp;huart1,&quot;STR1_Write_OK\r\n&quot;,sizeof(&quot;STR1_Write_OK\r\n&quot;));    HAL_Delay(1000);    HAL_I2C_Mem_Read(&amp;hi2c1,AT24C02_Read,0,I2C_MEMADD_SIZE_8BIT,ReadBuffer,sizeof(str1),1000);    HAL_Delay(1000);    HAL_UART_Transmit_IT(&amp;huart1,ReadBuffer,sizeof(str1));    HAL_Delay(1000);    //中断方式写入读取    if(HAL_I2C_Mem_Write_IT(&amp;hi2c1,AT24C02_Write,0,I2C_MEMADD_SIZE_8BIT,str2,sizeof(str2))==HAL_OK)    HAL_UART_Transmit_IT(&amp;huart1,&quot;STR2_Write_OK\r\n&quot;,sizeof(&quot;STR2_Write_OK\r\n&quot;));    HAL_Delay(1000);    HAL_I2C_Mem_Read_IT(&amp;hi2c1,AT24C02_Read,0,I2C_MEMADD_SIZE_8BIT,ReadBuffer,sizeof(str2));    HAL_Delay(1000);    HAL_UART_Transmit_IT(&amp;huart1,ReadBuffer,sizeof(str2));    HAL_Delay(1000);    //DMA中断方式写入读取    if(HAL_I2C_Mem_Write_DMA(&amp;hi2c1,AT24C02_Write,0,I2C_MEMADD_SIZE_8BIT,str3,sizeof(str3))==HAL_OK)    HAL_UART_Transmit_IT(&amp;huart1,&quot;STR3_Write_OK\r\n&quot;,sizeof(&quot;STR3_Write_OK\r\n&quot;));    HAL_Delay(1000);    HAL_I2C_Mem_Read_DMA(&amp;hi2c1,AT24C02_Read,0,I2C_MEMADD_SIZE_8BIT,ReadBuffer,sizeof(str3));    HAL_Delay(1000);    HAL_UART_Transmit_IT(&amp;huart1,ReadBuffer,sizeof(str3));    HAL_Delay(1000);  /* USER CODE END 2 */</code></pre></li></ul></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>嵌入式常见协议总结</title>
    <link href="/2023/10/30/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B8%B8%E8%A7%81%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93/"/>
    <url>/2023/10/30/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B8%B8%E8%A7%81%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="1、UART串口通信"><a href="#1、UART串口通信" class="headerlink" title="1、UART串口通信"></a>1、UART串口通信</h1><h2 id="1-1简介"><a href="#1-1简介" class="headerlink" title="1.1简介"></a>1.1简介</h2><ul><li><p>通用异步收发器 <strong>UART</strong>（Universal AsynchronousReceiver&#x2F;Transmitter)，是一种串行、异步、全双工的通信协议。高电平代表’1‘，低电平代表’0‘。特别注意固定格式位，起始位以0为通信起步，停止位以1作为结束位。</p></li><li><p>整体结构如图：</p><p><img src="/./../photo/%E7%BB%93%E6%9E%84%E7%AE%80%E5%9B%BE.png"></p></li></ul><h2 id="1-2参数配置"><a href="#1-2参数配置" class="headerlink" title="1.2参数配置"></a>1.2参数配置</h2><ul><li><p>数据传输格式</p><p><img src="/./../photo/UART%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F.png" alt="数据格式"></p><ul><li>起始位总是以低电平有效，停止位以高电平有效。</li><li>数据位：数据位可以是5、6、7、8，9位等，构成一个字符（一般都是8位）。如ASCII码（7位），扩展BCD码（8位）。先发送<strong>最低位</strong>，最后发送<strong>最高位</strong>，使用低电平表示‘0’高电平表示‘1’完成数据位的传输。</li><li>奇偶检验位：数据位加上这一位后，使得“1”的位数应为偶数(偶校验)或奇数(奇校验)，以此来校验数据传送的正确性。</li></ul></li><li><p>波特率</p><ul><li>数据传输的速率用波特率来表示。通俗讲就是让通信双方知道什么时间点来采样数据。例如:通信波特率是115200bps，即代表1秒可以传输115200位的数据。</li></ul></li></ul><h2 id="1-3示例"><a href="#1-3示例" class="headerlink" title="1.3示例"></a>1.3示例</h2><ul><li><p>在stm32中如何使用串口，来实现printf函数与PC串口助手进行通信</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//值得的注意点：printf函数最终调用的是fputc(int ch, FILE *f)来输出字符串的，但是这个函数在stdio.h文件里面仅仅是定义了但是没有实现，所以必须重定义这个函数。</span><br>    <span class="hljs-comment">/*以下示例均以UART1来作为示例*/</span><br>    <span class="hljs-comment">/*HAL库函数版本实现串口的中断接收和发送*/</span><br>    <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">    &#123;</span><br>        __IO <span class="hljs-type">uint32_t</span> SR;         <span class="hljs-comment">/*!&lt; USART Status register,                   Address offset: 0x00 */</span><br>        __IO <span class="hljs-type">uint32_t</span> DR;         <span class="hljs-comment">/*!&lt; USART Data register,                     Address offset: 0x04 */</span><br>        __IO <span class="hljs-type">uint32_t</span> BRR;        <span class="hljs-comment">/*!&lt; USART Baud rate register,                Address offset: 0x08 */</span><br>        __IO <span class="hljs-type">uint32_t</span> CR1;        <span class="hljs-comment">/*!&lt; USART Control register 1,                Address offset: 0x0C */</span><br>        __IO <span class="hljs-type">uint32_t</span> CR2;        <span class="hljs-comment">/*!&lt; USART Control register 2,                Address offset: 0x10 */</span><br>        __IO <span class="hljs-type">uint32_t</span> CR3;        <span class="hljs-comment">/*!&lt; USART Control register 3,                Address offset: 0x14 */</span><br>        __IO <span class="hljs-type">uint32_t</span> GTPR;       <span class="hljs-comment">/*!&lt; USART Guard time and prescaler register, Address offset: 0x18 */</span><br>    &#125; USART_TypeDef;<span class="hljs-comment">//这是底层寄存器封装</span><br>    <br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> PERIPH_BASE           0x40000000UL</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> APB2PERIPH_BASE       (PERIPH_BASE + 0x00010000UL)</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> USART1_BASE           (APB2PERIPH_BASE + 0x00003800UL)</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> USART1              ((USART_TypeDef *)USART1_BASE)</span><br>    <br>    <span class="hljs-comment">/*重定义fputc(int ch, FILE *f)*/</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">fputc</span><span class="hljs-params">(<span class="hljs-type">int</span> ch, FILE *f)</span><br>    &#123;<br>        <span class="hljs-keyword">while</span> ((USART1-&gt;SR &amp; <span class="hljs-number">0X40</span>) == <span class="hljs-number">0</span>);     <span class="hljs-comment">/* 等待上一个字符发送完成 */</span><br>        USART_UX-&gt;DR = (<span class="hljs-type">uint8_t</span>)ch;           <span class="hljs-comment">/* 将要发送的字符 ch 写入到DR寄存器 */</span><br>        <span class="hljs-keyword">return</span> ch;<br>    &#125;<br>    <span class="hljs-comment">/*初始化串口1,省略大部分代码，保留核心函数*/</span><br>    UART_HandleTypeDef g_uart1_handle;  <span class="hljs-comment">/* UART句柄 */</span><br>    HAL_UART_Init(&amp;g_uart1_handle)内部调用--&gt;HAL_UART_MspInit(&amp;g_uart1_handle)--&gt; HAL_GPIO_Init()函数来配置相关引脚的复用输入输出--&gt;HAL_NVIC_EnableIRQ()使能串口中断--&gt;HAL_NVIC_SetPriority()设置中断优先级<br>    <br>        HAL_UART_Receive_IT(&amp;g_uart1_handle, (<span class="hljs-type">uint8_t</span> *)g_rx_buffer, RXBUFFERSIZE)开启串口接收中断天<br>    <br>        USART1_IRQHandler()串口<span class="hljs-number">1</span>中断服务函数--&gt;HAL_UART_IRQHandler()HAL串口中断公共服务函--&gt;HAL_UART_RxCpltCallback()中断接收回调函数 <br></code></pre></td></tr></table></figure></li></ul><h1 id="2、集成电路总线-IIC"><a href="#2、集成电路总线-IIC" class="headerlink" title="2、集成电路总线(IIC)"></a>2、集成电路总线(IIC)</h1><h2 id="2-1简介"><a href="#2-1简介" class="headerlink" title="2.1简介"></a>2.1简介</h2><ul><li>IIC使用两根信号线进行通信：一根时钟线SCL，一根数据线SDA。IIC将SCL处于高时SDA拉低的动作作为开始信号，SCL处于高时SDA拉高的动作作为结束信号；传输数据时，SDA在SCL低电平时改变数据，在SCL高电平时保持数据，每个SCL脉冲的高电平传递1位数据。IIC是半双工同步通信协议</li></ul><h2 id="2-2总线特性与硬件结构"><a href="#2-2总线特性与硬件结构" class="headerlink" title="2.2总线特性与硬件结构"></a>2.2总线特性与硬件结构</h2><ul><li><p>IIC总线上所有器件的SDA、SCL引脚输出驱动都为 <strong>开漏(OD)</strong> 结构，通过外接上拉电阻实现总线上所有节点SDA、SCL信号的<strong>线与</strong>逻辑关系；</p></li><li><p>总线上的所有设备通过软件寻址且具有唯一的地址（7位或10位）。7位“从机专用地址码”，其高4位为由生产厂家制定的<strong>设备类型地址</strong>，低3位为器件引脚定义地址（由使用者定义）；10位地址不常见；</p></li><li><p>支持多主机。在总线上存在多个主机时，通过冲突检测和仲裁机制防止多个主机同时发起数据传输时存在的冲突；</p></li><li><p>通信模式</p><ul><li><table><thead><tr><th align="center">模式</th><th align="center">速度</th></tr></thead><tbody><tr><td align="center">标准模式（Standard Mode）</td><td align="center">100kb&#x2F;s</td></tr><tr><td align="center">快速模式（Fast Mode）</td><td align="center">400kb&#x2F;s</td></tr><tr><td align="center">增强快速模式（Fast Mode Plus）</td><td align="center">1Mb&#x2F;s</td></tr><tr><td align="center">高速模式（High Speed Mode）</td><td align="center">3.4Mb&#x2F;s</td></tr><tr><td align="center">极速模式（Ultra-FastMode）</td><td align="center">5Mb&#x2F;s</td></tr></tbody></table></li></ul></li><li><p>硬件结构</p><ul><li>IIC使用两根信号线进行通信，要求两根线都使用 <strong>开漏输出接上拉电阻</strong> 的配置，以此实现总线上所有节点SDA、SCL信号的 <strong>线与</strong> 逻辑关系。</li><li><img src="./../photo/IIC总线结构体图.png" alt="总线结构图" style="zoom:80%;" /></li><li>IIC允许一对多通信，但是同一时间只能有一个丛机跟主机通信</li></ul></li></ul><h2 id="2-3工作时序"><a href="#2-3工作时序" class="headerlink" title="2.3工作时序"></a>2.3工作时序</h2><ul><li><strong>数据有效性以及采集过程</strong><ul><li>IIC 的数据读取动作都在 <strong>SCL为高</strong> 时产生，<strong>SCL为低</strong>时是数据改变的时期，无论SDA如何变化都不影响读取。所以，传输数据的过程中，当SCL为高时，数据应当保持稳定，避免数据的采集出错。</li></ul></li><li><strong>开始和结束信号</strong><ul><li><strong>开始信号：</strong>SCL为高时，SDA从高到低的跳变产生开始信号</li><li><strong>结束信号：</strong>SCL为高时，SDA从低到高的跳变产生结束信号</li></ul></li><li><strong>重复开始信号（ReSTART&#x2F;Sr）：</strong> 在结束时不给出STOP信号，而以一个时钟周期内再次给出开始信号作为替代</li><li><strong>字节格式：</strong>SDA数据线上的每个字节<strong>必须是8位</strong>，对于每次传输的<strong>字节数没有限制</strong>。每个字节（8位）数据传送完后紧跟着应答信号（ACK，第9位）。数据的先后顺序为：<strong>高位在前</strong> 。</li><li><strong>应答信号（ACK）：</strong>协议规定数据传输过程必须包含应答（ACK）。接收器通过应答告知发送的字节已被成功接收，之后发送器可以进行下一个字节的传输。<strong>主机产生数据传输过程中的所有时钟，包括用于应答的第9个时钟。发送器在应答时钟周期内释放对SDA总线的控制，</strong>这样接收器可以通过将SDA线拉低告知发送器：数据已被成功接收。（<strong>特别注意，ACK信号是主机发送完数据后，必须必须释放SDA总线后，丛机来控制SDA总线发出的信号</strong>）<ul><li>应答信号分为两种：<ul><li>当第9位(应答位)为 <strong>低电平</strong> 时，为 <strong>ACK</strong> 信号</li><li>当第9位(应答位)为 <strong>高电平</strong> 时，为 <strong>NACK</strong>信号</li></ul></li></ul></li></ul><h2 id="2-4地址设备为7位的通信过程"><a href="#2-4地址设备为7位的通信过程" class="headerlink" title="2.4地址设备为7位的通信过程"></a>2.4地址设备为7位的通信过程</h2><ul><li>完整通信示意图：<ul><li><img src="./../photo/7bit设备地址通信示意图.png" alt="示意图" style="zoom:80%;" /></li><li><strong>START信号后，第一个字节包含设备7位地址以及1位读写位，读写位表示主机将要对丛机进行的操作。发送完这个字节之后，主机释放SDA总线等待从机给出ACK应答。如果从机给出了ACK应答，表示从机地址正确（有从机响应）并且已知晓是读还是写，便可以开始读写数据。如果从机没有给出ACK应答，则说明接收设备可能没有收到数据（如寻址的设备不存在或是设备正在忙碌）或无法解析收到的数据，如果是这样，则由主机来决定如何处理（STOP或ReSTART）。</strong><ul><li>情况一：主机写，丛机收，传输过程传输方向不变<ul><li><img src="./../photo/主发丛收.png" alt="示意图" style="zoom:80%;" /></li></ul></li><li>情况二：主机收，丛机发送，传输过程传输方向改变<ul><li><img src="./../photo/主收丛发.png" alt="示意图" style="zoom:80%;" /></li></ul></li></ul></li></ul></li></ul><h2 id="2-4实例操作"><a href="#2-4实例操作" class="headerlink" title="2.4实例操作"></a>2.4实例操作</h2><ul><li><p>情况一：用GPIO来模拟IIC通信过程</p></li><li><pre><code class="c">/*以F103为例子，SCL--&gt;PB6,SDA--&gt;PB7，精简代码，不是所有都列出来*/#define SCL(x)do&#123;x? HAL_GPIO_WritePin(GPIOB,GPIO_PIN6,GPIO_PIN_SET):                     \HAL_GPIO_WritePin(GPIOB,GPIO_PIN6,GPIO_PIN_RESET);&#125;while(0)#define SDA(x)do&#123;x? HAL_GPIO_WritePin(GPIOB,GPIO_PIN7,GPIO_PIN_SET):                     \HAL_GPIO_WritePin(GPIOB,GPIO_PIN7,GPIO_PIN_RESET);&#125;while(0)void init(void)//初始化函数&#123;    GPIO_InitTypeDef gpio_init_struct;        /*首先是初始化这两个IO口，SCL配置为推挽输出，SDA配置为开漏输出（这样保证无论在哪种通信下，都不需要去切换IO口的     方向，因为开漏输出也可以读取IO的电平）*/        ...配置省略            HAL_GPIO_Init(GPIOB, &amp;gpio_init_struct);    stop();//初始化后先停止&#125;void start(void)//起始信号&#123;    /*SCL为高时，SDA从高到低的跳变产生开始信号*/    SDA(1);    delay_us(2);    SCL(1);    delay_us(2);    SDA(0);    delay_us(2);        SCL(0);//这个操作是钳住IIC总线，准备接受或者发送数据    delay_us(2);&#125;void stop(void)//停止信号&#123;    /*SCL为高时，SDA从低到高的跳变产生结束信号*/    SDA(0);    delay_us(2);    SCL(1);    delay_us(2);    SDA(1);    delay_us(2);&#125;void master_ack(void)//主机应答信号&#123;    SDA(0);    delay_us(2);    SCL(1);    delay_us(2);    SCL(0);    delay_us(2);        SDA(1);//释放总线    delay_us(2);      &#125;void master_nack(void)//主机不应答信号&#123;    SDA(1);    delay_us(2);    SCL(1);    delay_us(2);    SCL(0);    delay_us(2);     &#125;uint8_t slave_ack(void)&#123;    uint8_t timeout;    uint8_t res=0;    SDA(1);//主机释放总线，此时丛机可以操作SDA线    delay_us(2);    SCL(1);//拉高时钟线，可以传输数据了    delay_us(2);    while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7))//等待SDA线的电平被从机拉低    &#123;        timeout++;        if(timeout&gt;250)        &#123;            stop();//超时            res=1;            break;        &#125;    &#125;    SCL(0);    delay_us(2);    return res;&#125;void iic_send(uint8_t data)//发送8位数据&#123;    uint8_t i;    for(i=0;i&lt;8;i++)    &#123;        SDA((data&amp;0x80)&gt;&gt;7);//因为IIC是先传输最高位的        delay_us(2);        SCL(1);        delay_us(2);        SCL(0);        delay_us(2);        data&lt;&lt;=1;    &#125;    SDA(1);//释放总线&#125;uint8_t iic_read(uint8_t ack)//读取8位数据   &#123;    uint8_t res;    uint8_t i;    for(i=0;i&lt;8;i++)    &#123;        res&lt;&lt;=1;        SCL(1);        delay_us(2);        if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7)           &#123;               res++;           &#125;        SCL(0);          delay_us(2);    &#125;    if(!ack)    &#123;         master_nack();          &#125;    else    &#123;         master_ack();           &#125;    return res;       &#125; /-&gt;CODEEND<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  <br>  <br>  <br>- 情况二：硬件IIC，用HAL库函数实现（F1系列HAL库硬件IIC可能会有BUG）<br><br>- ``` c<br>  <span class="hljs-comment">/////////////////////////</span><br>  <span class="hljs-function">I2C_HandleTypeDef handle_iic</span><br><span class="hljs-function">      <span class="hljs-type">void</span> <span class="hljs-title">iic_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><span class="hljs-comment">//硬件IIC初始化函数</span></span><br><span class="hljs-function">  </span>&#123;<br>      <span class="hljs-comment">/*具体句柄配置省略，设置i2c速度、模式、丛机地址位数等等*/</span><br>      ...省略代码<br>          <span class="hljs-built_in">HAL_I2C_Iint</span>(&amp;handle_iic);<span class="hljs-comment">/*这是IIC的初始化，还需要对应GPIO的初始化，这个函数内部会调用HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)这个函数*/</span><br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HAL_I2C_MspInit</span><span class="hljs-params">(I2C_HandleTypeDef* hi2c)</span></span><br><span class="hljs-function">  </span>&#123;<br>      GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="hljs-number">0</span>&#125;;<br>      <span class="hljs-keyword">if</span>(hi2c-&gt;I2C1)<br>      &#123;<br>          ...具体GPIO配置省略<br>          <span class="hljs-built_in">HAL_GPIO_Init</span>();<br>          __HAL_RCC_I2C1_CLK_ENABLE();<br>          <span class="hljs-built_in">HAL_NVIC_SetPriority</span>(I2C1_EV_IRQn, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>          <span class="hljs-built_in">HAL_NVIC_EnableIRQ</span>(I2C1_EV_IRQn);<br>          <span class="hljs-built_in">HAL_NVIC_SetPriority</span>(I2C1_ER_IRQn, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>          <span class="hljs-built_in">HAL_NVIC_EnableIRQ</span>(I2C1_ER_IRQn);<br>      &#125;<br>  &#125;<br>  <span class="hljs-comment">/*HAL库提供三种类型读写函（阻塞、非阻塞（其中包括中断和DMA））*/</span><br>  <span class="hljs-comment">//阻塞IIC发送、接受代码原型</span><br>  <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Master_Transmit</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size, <span class="hljs-type">uint32_t</span> Timeout)</span></span>;<br>  <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Master_Receive</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size, <span class="hljs-type">uint32_t</span> Timeout)</span></span>;<br>  <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Mem_Write</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint16_t</span> MemAddress, <span class="hljs-type">uint16_t</span> MemAddSize, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size, <span class="hljs-type">uint32_t</span> Timeout)</span></span>;<br>  <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Mem_Read</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint16_t</span> MemAddress, <span class="hljs-type">uint16_t</span> MemAddSize, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size, <span class="hljs-type">uint32_t</span> Timeout)</span></span>;<br>  <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_IsDeviceReady</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint32_t</span> Trials, <span class="hljs-type">uint32_t</span> Timeout)</span></span>;<br>  <br>  <span class="hljs-comment">//非阻塞普通中断IIC发送、接受代码原型</span><br>  <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Master_Transmit_IT</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size)</span></span>;<br>  <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Master_Receive_IT</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size)</span></span>;<br>  <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Mem_Write_IT</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint16_t</span> MemAddress, <span class="hljs-type">uint16_t</span> MemAddSize, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size)</span></span>;<br>  <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Mem_Read_IT</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint16_t</span> MemAddress, <span class="hljs-type">uint16_t</span> MemAddSize, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size)</span></span>;<br>  <br>  <span class="hljs-comment">//非阻塞DMA中断IIC发送、接受代码原型</span><br>  <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Master_Transmit_DMA</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size)</span></span>;<br>  <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Master_Receive_DMA</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size)</span></span>;<br>  <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Mem_Write_DMA</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint16_t</span> MemAddress, <span class="hljs-type">uint16_t</span> MemAddSize, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size)</span></span>;<br>  <span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_I2C_Mem_Read_DMA</span><span class="hljs-params">(I2C_HandleTypeDef *hi2c, <span class="hljs-type">uint16_t</span> DevAddress, <span class="hljs-type">uint16_t</span> MemAddress, <span class="hljs-type">uint16_t</span> MemAddSize, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size)</span></span>;<br>  /-&gt;CODEEND<br></code></pre></td></tr></table></figure></code></pre></li><li><p><strong>通过硬件IIC读取AT24C02代码</strong></p></li><li><pre><code class="c">/* USER CODE BEGIN PV *///AT24Cxx这是一个IIC接口的EEPROM存储芯片//读写地址#define AT24C02_Write 0xA0#define AT24C02_Read  0xA1//三次写入的字符串unsigned char str1[]=&#123;&quot;xyz666&quot;&#125;;unsigned char str2[]=&#123;&quot;1234567&quot;&#125;;unsigned char str3[]=&#123;&quot;abcdefg&quot;&#125;;//读取缓存区uint8_t ReadBuffer[50];/* USER CODE END PV */  /* USER CODE BEGIN 2 */    HAL_UART_Transmit_IT(&amp;huart1,&quot;Init Ok!\r\n&quot;,sizeof(&quot;Init Ok!\r\n&quot;));    HAL_Delay(100);    //阻塞方式写入读取    if(HAL_I2C_Mem_Write(&amp;hi2c1,AT24C02_Write,0,I2C_MEMADD_SIZE_8BIT,str1,sizeof(str1),1000)==HAL_OK)    HAL_UART_Transmit_IT(&amp;huart1,&quot;STR1_Write_OK\r\n&quot;,sizeof(&quot;STR1_Write_OK\r\n&quot;));    HAL_Delay(1000);    HAL_I2C_Mem_Read(&amp;hi2c1,AT24C02_Read,0,I2C_MEMADD_SIZE_8BIT,ReadBuffer,sizeof(str1),1000);    HAL_Delay(1000);    HAL_UART_Transmit_IT(&amp;huart1,ReadBuffer,sizeof(str1));    HAL_Delay(1000);    //中断方式写入读取    if(HAL_I2C_Mem_Write_IT(&amp;hi2c1,AT24C02_Write,0,I2C_MEMADD_SIZE_8BIT,str2,sizeof(str2))==HAL_OK)    HAL_UART_Transmit_IT(&amp;huart1,&quot;STR2_Write_OK\r\n&quot;,sizeof(&quot;STR2_Write_OK\r\n&quot;));    HAL_Delay(1000);    HAL_I2C_Mem_Read_IT(&amp;hi2c1,AT24C02_Read,0,I2C_MEMADD_SIZE_8BIT,ReadBuffer,sizeof(str2));    HAL_Delay(1000);    HAL_UART_Transmit_IT(&amp;huart1,ReadBuffer,sizeof(str2));    HAL_Delay(1000);    //DMA中断方式写入读取    if(HAL_I2C_Mem_Write_DMA(&amp;hi2c1,AT24C02_Write,0,I2C_MEMADD_SIZE_8BIT,str3,sizeof(str3))==HAL_OK)    HAL_UART_Transmit_IT(&amp;huart1,&quot;STR3_Write_OK\r\n&quot;,sizeof(&quot;STR3_Write_OK\r\n&quot;));    HAL_Delay(1000);    HAL_I2C_Mem_Read_DMA(&amp;hi2c1,AT24C02_Read,0,I2C_MEMADD_SIZE_8BIT,ReadBuffer,sizeof(str3));    HAL_Delay(1000);    HAL_UART_Transmit_IT(&amp;huart1,ReadBuffer,sizeof(str3));    HAL_Delay(1000);  /* USER CODE END 2 *//-&gt;CODEEND<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">  <br>  <br>  <br><span class="hljs-comment"># 3、串行外设接口（SPI）</span><br><br><span class="hljs-comment">## 3.1简介</span><br><br>- SPI，是一<span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>种高速的，全双工，同步<span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>的通信总线，并且在芯片的管脚上只占用四根线。SPI分为主、从两种模式，一个SPI通讯系统需要包含一个（且只能是一个）主设备，一个或多个从设备。提供时钟的为主设备（Master），接收时钟的设备为从设备（Slave），SPI接口的读写操作，都是由主设备发起。当存在多个从设备时，通过各自的片选信号进行管理。<br>- 4线SPI示意图<br>  - ![示意图](./../photo/4线SPI示意图.png)<br>  - <span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>MISO<span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>： <span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>主设备输入/从设备输出引脚<span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>。该引脚在从模式下发送数据，在主模式下接收数据。<br>  - <span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>MOSI<span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>： <span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>主设备输出/从设备输入引脚<span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>。该引脚在主模式下发送数据，在从模式下接收数据。<br>  - <span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>SCLK<span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>：<span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>串行时钟信号<span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>，由主设备产生。<br>  - <span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>CS/SS<span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>：<span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>从设备片选信号<span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>，由主设备控制。它的功能是用来作为“片选引脚”，也<span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>就是选择指定的从设备<span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>，让主设备可以单独地与特定从设备通讯，避免数据线上的冲突。<br>- SPI工作原理<br>  - 在主机和从机都有一个串行移位寄存器，主机通过向它的 SPI 串行寄存 器写入一个字节来发起一次传输。串行移位寄存器通过 MOSI 信号线将字节传送给从机，从机 也将自己的串行移位寄存器中的内容通过 MISO 信号线返回给主机。这样，两个移位寄存器中 的内容就被交换。外设的写操作和读操作是同步完成的。<span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>如果只是进行写操作，主机只需忽略 接收到的字节。反之，若主机要读取从机的一个字节，就必须发送一个空字节引发从机传输。<span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><br>- SPI传输方式<br>  - <span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>SPI总共有三种传输方式：全双工、单工以及半双工传输方式。<span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><br><br><span class="hljs-comment">## 3.2工作时序</span><br><br>- SPI四种不同工作模式由CPOL(时钟极性)和CPHA（时钟相位）来控制<br><br>  - |<span class="hljs-string"> SPI工作模式 </span>|<span class="hljs-string"> CPOL </span>|<span class="hljs-string"> CPHA </span>|<span class="hljs-string"> SCL空闲状态 </span>|<span class="hljs-string"> 采样边沿 </span>|<span class="hljs-string"> 采样时刻 </span>|<br>    |<span class="hljs-string"> :---------: </span>|<span class="hljs-string"> :--: </span>|<span class="hljs-string"> :--: </span>|<span class="hljs-string"> :---------: </span>|<span class="hljs-string"> :------: </span>|<span class="hljs-string"> :------: </span>|<br>    |<span class="hljs-string">      0      </span>|<span class="hljs-string">  0   </span>|<span class="hljs-string">  0   </span>|<span class="hljs-string">   低电平    </span>|<span class="hljs-string">  上升沿  </span>|<span class="hljs-string"> 奇数边沿 </span>|<br>    |<span class="hljs-string">      1      </span>|<span class="hljs-string">  0   </span>|<span class="hljs-string">  1   </span>|<span class="hljs-string">   低电平    </span>|<span class="hljs-string">  下降沿  </span>|<span class="hljs-string"> 偶数边沿 </span>|<br>    |<span class="hljs-string">      2      </span>|<span class="hljs-string">  1   </span>|<span class="hljs-string">  0   </span>|<span class="hljs-string">   高电平    </span>|<span class="hljs-string">  下降沿  </span>|<span class="hljs-string"> 奇数边沿 </span>|<br>    |<span class="hljs-string">      3      </span>|<span class="hljs-string">  1   </span>|<span class="hljs-string">  1   </span>|<span class="hljs-string">   高电平    </span>|<span class="hljs-string">  上升沿  </span>|<span class="hljs-string"> 偶数边沿 </span>|<br><br>  - 以CPOL=0,CPHA=0为示例时序图，其他同理<br><br>    - ![时序图](./../photo/SPI时序图.png)<br>    - 由图可以看出来，在传输开始前以及传输完成后，CPOL即SCL都为低电平，表示空闲的时候SCL为低电平状态，由于采样边沿是上升沿，即在第1、3、5、7.....等这些边沿进行采样。<br><br><span class="hljs-comment">## 3.3实例操作</span><br><br>- <span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>基于stm32的HAL库配置SPI<span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><br><br>- ``` c<br>  /<span class="hljs-symbol">*</span> USER CODE BEGIN PV <span class="hljs-symbol">*</span>/<br>  //AT24Cxx这是一个IIC接口的EEPROM存储芯片<br>  //读写地址<br>  <span class="hljs-comment">#define AT24C02_Write 0xA0</span><br>  <span class="hljs-comment">#define AT24C02_Read  0xA1</span><br>  //三次写入的字符串<br>  unsigned char str1[]=&#123;<span class="hljs-string">&quot;xyz666&quot;</span>&#125;;<br>  unsigned char str2[]=&#123;<span class="hljs-string">&quot;1234567&quot;</span>&#125;;<br>  unsigned char str3[]=&#123;<span class="hljs-string">&quot;abcdefg&quot;</span>&#125;;<br>  //读取缓存区<br>  uint8_t ReadBuffer[50];<br>  /<span class="hljs-symbol">*</span> USER CODE END PV <span class="hljs-symbol">*</span>/<br>    /<span class="hljs-symbol">*</span> USER CODE BEGIN 2 <span class="hljs-symbol">*</span>/<br>  HAL_UART_Transmit_IT(&amp;huart1,<span class="hljs-string">&quot;Init Ok!\r\n&quot;</span>,sizeof(<span class="hljs-string">&quot;Init Ok!\r\n&quot;</span>));<br>  HAL_Delay(100);<br>  //阻塞方式写入读取<br>  if(HAL_I2C_Mem_Write(&amp;hi2c1,AT24C02_Write,0,I2C_MEMADD_SIZE_8BIT,str1,sizeof(str1),1000)==HAL_OK)<br>  HAL_UART_Transmit_IT(&amp;huart1,<span class="hljs-string">&quot;STR1_Write_OK\r\n&quot;</span>,sizeof(<span class="hljs-string">&quot;STR1_Write_OK\r\n&quot;</span>));<br>  HAL_Delay(1000);<br>  HAL_I2C_Mem_Read(&amp;hi2c1,AT24C02_Read,0,I2C_MEMADD_SIZE_8BIT,ReadBuffer,sizeof(str1),1000);<br>  HAL_Delay(1000);<br>  HAL_UART_Transmit_IT(&amp;huart1,ReadBuffer,sizeof(str1));<br>  HAL_Delay(1000);<br>  //中断方式写入读取<br>  if(HAL_I2C_Mem_Write_IT(&amp;hi2c1,AT24C02_Write,0,I2C_MEMADD_SIZE_8BIT,str2,sizeof(str2))==HAL_OK)<br>  HAL_UART_Transmit_IT(&amp;huart1,<span class="hljs-string">&quot;STR2_Write_OK\r\n&quot;</span>,sizeof(<span class="hljs-string">&quot;STR2_Write_OK\r\n&quot;</span>));<br>  HAL_Delay(1000);<br>  HAL_I2C_Mem_Read_IT(&amp;hi2c1,AT24C02_Read,0,I2C_MEMADD_SIZE_8BIT,ReadBuffer,sizeof(str2));<br>  HAL_Delay(1000);<br>  HAL_UART_Transmit_IT(&amp;huart1,ReadBuffer,sizeof(str2));<br>  HAL_Delay(1000);<br>  //DMA中断方式写入读取<br>  if(HAL_I2C_Mem_Write_DMA(&amp;hi2c1,AT24C02_Write,0,I2C_MEMADD_SIZE_8BIT,str3,sizeof(str3))==HAL_OK)<br>  HAL_UART_Transmit_IT(&amp;huart1,<span class="hljs-string">&quot;STR3_Write_OK\r\n&quot;</span>,sizeof(<span class="hljs-string">&quot;STR3_Write_OK\r\n&quot;</span>));<br>  HAL_Delay(1000);<br>  HAL_I2C_Mem_Read_DMA(&amp;hi2c1,AT24C02_Read,0,I2C_MEMADD_SIZE_8BIT,ReadBuffer,sizeof(str3));<br>  HAL_Delay(1000);<br>  HAL_UART_Transmit_IT(&amp;huart1,ReadBuffer,sizeof(str3));<br>  HAL_Delay(1000);<br>    /<span class="hljs-symbol">*</span> USER CODE END 2 <span class="hljs-symbol">*</span>/<br>  /-&gt;CODEEND<br></code></pre></td></tr></table></figure></code></pre></li><li><p><strong>SPI-&gt;norflash存储芯片的读写</strong></p></li><li><pre><code class="c">/*仅仅介绍几个函数，具体的请参考完整代码*/void norflash_init()&#123;    GPIO_InitTypeDef gpio_init_struct;//主要为了配置片选引脚    ...配置代码省略    HAL_GPIO_Init(GPIOX,&amp;gpio_init_struct)    spi_init();    spi_set_speed(SPI_SPEED_2);//这个设置SPI速度的    /*有些flash芯片需要开启4字节地址模式*/   &#125;void norflash_send_address(uint32_t address)&#123;    if (g_norflash_type == W25Q256) /*  只有W25Q256支持4字节地址模式 */    &#123;        spi2_read_write_byte((uint8_t)((address)&gt;&gt;24)); /* 发送 bit31 ~ bit24 地址 */    &#125;     spi2_read_write_byte((uint8_t)((address)&gt;&gt;16));     /* 发送 bit23 ~ bit16 地址 */    spi2_read_write_byte((uint8_t)((address)&gt;&gt;8));      /* 发送 bit15 ~ bit8  地址 */    spi2_read_write_byte((uint8_t)address);             /* 发送 bit7  ~ bit0  地址 */&#125;void norflash_read(uint8_t *pbuf, uint32_t addr, uint16_t datalen)&#123;    uint16_t i;    HAL_GPIO_WritePin(GPIOX,GPIO_PIN,GPIO_PIN_RESET);//拉低片选选中芯片    spi2_read_write_byte(FLASH_ReadData);       /* 发送读取命令 */    norflash_send_address(addr);                /* 发送地址 */        for(i=0;i&lt;datalen;i++)    &#123;        pbuf[i] = spi2_read_write_byte(0XFF);   /* 循环读取 */    &#125;        HAL_GPIO_WritePin(GPIOX,GPIO_PIN,GPIO_PIN_SET);&#125;void norflash_write(uint8_t *pbuf, uint32_t addr, uint16_t datalen)&#123;    uint32_t secpos;    uint16_t secoff;    uint16_t secremain;    uint16_t i;    uint8_t *norflash_buf;    norflash_buf = g_norflash_buf;    secpos = addr / 4096;       /* 扇区地址 */    secoff = addr % 4096;       /* 在扇区内的偏移 */    secremain = 4096 - secoff;  /* 扇区剩余空间大小 */    if (datalen &lt;= secremain)    &#123;        secremain = datalen;    /* 不大于4096个字节 */    &#125;    while (1)    &#123;        norflash_read(norflash_buf, secpos * 4096, 4096);   /* 读出整个扇区的内容 */        for (i = 0; i &lt; secremain; i++)   /* 校验数据 */        &#123;            if (norflash_buf[secoff + i] != 0XFF)            &#123;                break;      /* 需要擦除, 直接退出for循环 */            &#125;        &#125;        if (i &lt; secremain)   /* 需要擦除 */        &#123;            norflash_erase_sector(secpos);  /* 擦除这个扇区 */            for (i = 0; i &lt; secremain; i++)   /* 复制 */            &#123;                norflash_buf[i + secoff] = pbuf[i];            &#125;            norflash_write_nocheck(norflash_buf, secpos * 4096, 4096);  /* 写入整个扇区 */        &#125;        else        /* 写已经擦除了的,直接写入扇区剩余区间. */        &#123;            norflash_write_nocheck(pbuf, addr, secremain);  /* 直接写扇区 */        &#125;        if (datalen == secremain)        &#123;            break;  /* 写入结束了 */        &#125;        else        /* 写入未结束 */        &#123;            secpos++;               /* 扇区地址增1 */            secoff = 0;             /* 偏移位置为0 */            pbuf += secremain;      /* 指针偏移 */            addr += secremain;      /* 写地址偏移 */            datalen -= secremain;   /* 字节数递减 */            if (datalen &gt; 4096)            &#123;                secremain = 4096;   /* 下一个扇区还是写不完 */            &#125;            else            &#123;                secremain = datalen;/* 下一个扇区可以写完了 */            &#125;        &#125;    &#125;&#125;/-&gt;CODEEND<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs elixir">  <br>  <br>  <br>- **扩展**<br>  <br>  - <span class="hljs-title class_">SPI</span>不仅仅只有<span class="hljs-number">4</span>线的，还有<span class="hljs-number">6</span>线的。多出来两根数据线，这样可以一个时钟周期传输两个字节<br><br><span class="hljs-comment"># 4、控制局域网总线（CAN）</span><br><br><span class="hljs-comment">## 4.1简介</span><br><br>- 控制器局域网总线（<span class="hljs-title class_">CAN</span>，<span class="hljs-title class_">Controller</span> <span class="hljs-title class_">Area</span> <span class="hljs-title class_">Network</span>）是一种用于实时应用的串行通讯协议总线，它可以使用双绞线来传输信号，是世界上应用最广泛的现场总线之一。<span class="hljs-title class_">CAN</span>协议用于汽车中各种不同元件之间的通信，以此取代昂贵而笨重的配电线束。该协议的健壮性使其用途延伸到其他自动化和工业应用。<span class="hljs-title class_">CAN</span>协议的特性包括完整性的串行数据通讯、提供实时支持、传输速率高达<span class="hljs-number">1</span>Mb/s、同时具有<span class="hljs-number">11</span>位的寻址以及检错能力。<br><br><span class="hljs-comment">## 4.2CAN总线结构</span><br><br>- **闭环总线结构**：如图所示，总线两端各连接一个<span class="hljs-number">120</span>欧的电阻，两根信号线形成回路。这种<span class="hljs-title class_">CAN</span>总线网络由<span class="hljs-title class_">ISO</span> <span class="hljs-number">11898</span>标准定义，是高速、短距离的<span class="hljs-title class_">CAN</span>网络，通信速率为<span class="hljs-number">125</span>kbit/s到<span class="hljs-number">1</span>Mbit/s。在<span class="hljs-number">1</span>Mbit/s通讯速率时，总线长度最长达<span class="hljs-number">40</span>m。<br>  - ![总线结构图](./../photo/闭环<span class="hljs-title class_">CAN</span>结构.png)<br>- **开环总线结构**：两根信号线独立，各自串联一个<span class="hljs-number">2.2</span>k欧的电阻。这种<span class="hljs-title class_">CAN</span>总线网络由<span class="hljs-title class_">ISO11519</span><span class="hljs-number">-2</span>标准定义，是低速、远距离的<span class="hljs-title class_">CAN</span>网络，通信速率最高<span class="hljs-number">125</span>kbit/s。在<span class="hljs-number">40</span>kbit/s速率时，总线最长距离可达<span class="hljs-number">1000</span>m。<br>  - ![示意图](./../photo/开环总线结构图.png)<br>- **<span class="hljs-title class_">CAN</span>总线特性**：<span class="hljs-title class_">CAN</span>总线由两根信号线，<span class="hljs-title class_">CANH</span>和<span class="hljs-title class_">CANL</span>，没有时钟同步信号。所以<span class="hljs-title class_">CAN</span>是一种异步通信方式。两根信号线的电压差<span class="hljs-title class_">CANH</span>-<span class="hljs-title class_">CANL</span>表示<span class="hljs-title class_">CAN</span>总线的电平，与传输的逻辑信号<span class="hljs-number">1</span>或<span class="hljs-number">0</span>对应。对应于逻辑<span class="hljs-number">1</span>的称为隐性（<span class="hljs-title class_">Recessive</span>）电平，对应于逻辑<span class="hljs-number">0</span>成为显性（<span class="hljs-title class_">Dominant</span>）电平。<br>  - ![示意图](./../photo/逻辑电平信号.png)<br>  - 在开环跟闭环的结构里面，隐形电平和显型电平对应的电压值略有不同<br>  - 隐性电平表示逻辑<span class="hljs-number">1</span><br>  - 显性电平表示逻辑<span class="hljs-number">0</span><br>- **<span class="hljs-title class_">CAN</span>总线特点**:<br>  - **实时性：** <span class="hljs-title class_">CAN</span>总线具有优越的实时性能，适用于需要及时传输数据的应用，如汽车控制系统、工业自动化等。仲裁机制和帧优先级的设计保证了低延迟和可预测性。**多主机系统：** <span class="hljs-title class_">CAN</span>支持多主机系统，多个节点可以同时发送和接收数据。**差分信号传输：** <span class="hljs-title class_">CAN</span>使用差分信号传输，通过两个线路（<span class="hljs-title class_">CAN_H</span>和<span class="hljs-title class_">CAN_L</span>）之间的电压差来传递信息。这种差分传输方式提供了良好的抗干扰性能。**仲裁机制：** <span class="hljs-title class_">CAN</span>总线采用非破坏性仲裁机制，通过比较消息标识符的优先级来决定哪个节点有权继续发送数据。这种机制确保了总线上数据传输的有序性，避免了冲突。**广播通信：** <span class="hljs-title class_">CAN</span>总线采用广播通信方式，即发送的数据帧可以被总线上的所有节点接收。**错误检测和处理：**<span class="hljs-title class_">CAN</span>总线具有强大的错误检测和处理机制。通过<span class="hljs-title class_">CRC</span>检查和其他错误检测手段。**多种帧类型：**<span class="hljs-title class_">CAN</span>总线上的节点没有地址的概念。<span class="hljs-title class_">CAN</span>总线上的数据是以帧为单位传输的，帧又分为数据帧、遥控帧等多种帧类型，帧包含需要传输的数据或控制信息。**特定标识符**：每一个帧有一个标识符（<span class="hljs-title class_">Identifier</span>，一下简称<span class="hljs-title class_">ID</span>）。<span class="hljs-title class_">ID</span>不是地址，它表示传输数据的类型，也可以用于总线仲裁时确定优先级。**滤波特性：**每个<span class="hljs-title class_">CAN</span>节点都接收数据，但是可以对接收的帧根据<span class="hljs-title class_">ID</span>进行过滤。**半双工：**<span class="hljs-title class_">CAN</span>总线通信时半双工的，即总线不能同时发送和接收。在多个节点竞争总线进行发送时，通过<span class="hljs-title class_">ID</span>的优先级进行仲裁。**无时钟信号：**<span class="hljs-title class_">CAN</span>总线没有用于同步的时钟信号，所以需要规定<span class="hljs-title class_">CAN</span>总线通信的波特率，所以节点都是用同样的波特率进行通信。<br><br><span class="hljs-comment">## 4.3CAN通信的重点（各种帧）</span><br><br>- <span class="hljs-title class_">CAN</span>网络中通信通过<span class="hljs-number">5</span>种类型的帧进行的。<br><br>  - <span class="hljs-number">5</span>种帧类型以及用途如下表<br><br>    - | 帧类型                        | 帧用途                                                       |<br>      | <span class="hljs-symbol">:----------------------------</span> | <span class="hljs-symbol">:-----------------------------------------------------------</span> |<br>      | 数据帧（<span class="hljs-title class_">Data</span> frame）          | 节点发送的包含<span class="hljs-title class_">ID</span>和数据的帧，用于发送单元向接收单元传送数据的帧。 |<br>      | 遥控帧（<span class="hljs-title class_">Remote</span> frame）        | 节点向网络上的其他节点发出的某个<span class="hljs-title class_">ID</span>的数据请求，发送节点收到遥控帧后就可以发送相应<span class="hljs-title class_">ID</span>的数据帧 |<br>      | 错误帧（<span class="hljs-title class_">Error</span> frame）         | 节点检测出错误时，向其他节点发送的通知错误的帧               |<br>      | 过载帧（<span class="hljs-title class_">Overload</span> frame）      | 接收单元未做好接收数据的准备时发送的帧，发送节点收到过载帧后可以暂缓发送数据帧 |<br>      | 帧间空间（<span class="hljs-title class_">Inter</span>-frame space） | 用于将数据帧、遥控帧与前后的帧分隔开的帧                     |<br><br>- **标准格式数据帧**：由<span class="hljs-number">7</span>个段构成，如下图<br><br>  - ![数据帧](./../photo/<span class="hljs-title class_">CAN</span>数据帧格式.png)<br><br>    - 帧起始<span class="hljs-symbol">:</span>一位显性电平；<br>    - 仲裁段禁止<span class="hljs-title class_">ID</span>高<span class="hljs-number">7</span>位全为隐性电平；<br>    - 控制段，保留位r0必须以显性电平发送。<span class="hljs-title class_">DLC</span>表示数据段的字节数<br>    - <span class="hljs-title class_">CRC</span>段，根据多项式生成<span class="hljs-title class_">CRC</span>校验码<br>    - <span class="hljs-title class_">ACK</span>段：发送方的<span class="hljs-title class_">ACK</span>发送<span class="hljs-number">2</span>个位的隐性位，接收单元<span class="hljs-title class_">ACK</span>，在<span class="hljs-title class_">ACK</span>位发送一个显性位，通知接收正常<br>    - 帧结束：<span class="hljs-number">7</span>个隐性位构成。<br><br>- **标准遥控帧**：由<span class="hljs-number">6</span>段构成，图示省略<br>  - 跟数据帧少了一个数据段<br>    - 遥控帧的<span class="hljs-title class_">RTR</span>位为隐性位，没有数据段<br>    - 遥控帧的数据长度码<span class="hljs-title class_">DLC</span>以请求数据帧的数据长度码表示<br>- **错误帧**：用于在接收和发送消息时检测出错误通知错误的帧。错误帧由错误标志和错误界定符构成。如图所示<br>  - ![错误帧](./../photo/错误帧.png)<br>    - 主动错误标志：<span class="hljs-number">6</span> 个位的显性位。<br>    - 被动错误标志：<span class="hljs-number">6</span> 个位的隐性位。<br>    - 错误界定符由 <span class="hljs-number">8</span> 个位的隐性位构成。<br>- **过载帧**：过载帧是用于接收单元通知其尚未完成接收准备的帧。过载帧由过载标志和过载界定符构成。<br>  <br>  - 过载标志：<span class="hljs-number">6</span> 个位的显性位。过载标志的构成与主动错误标志的构成相同。过载界定符：<span class="hljs-number">8</span> 个位的隐性位。过载界定符的构成与错误界定符的构成相同。<br>- **帧间隔**：帧间隔是用于分隔数据帧和遥控帧的帧。数据帧和遥控帧可通过插入帧间隔将本帧与前面的任何帧（数据帧、遥控帧、错误帧、过载帧）分开。<br>  <br>  - 间隔：<span class="hljs-number">3</span> 个位的隐性位。总线空闲：隐性电平，无长度限制（<span class="hljs-number">0</span> 亦可）。本状态下，可视为总线空闲，要发送的单元可开始访问总线。延迟传送（发送暂时停止）：<span class="hljs-number">8</span> 个位的隐性位。只在处于被动错误状态的单元刚发送一个消息后的帧间隔中包含的段。<br><br><span class="hljs-comment">## 4.4CAN总线优先级及同步</span><br><br>- **优先级决定**：在总线空闲态，最先开始发送消息的单元获得发送权。多个单元同时开始发送时，各发送单元从仲裁段的第一位开始进行仲裁。连续输出显性电平最多的单元可继续发送。<br><br>- **数据帧和遥控帧的优先级**：具有相同 <span class="hljs-title class_">ID</span> 的数据帧和遥控帧在总线上竞争时，仲裁段的最后一位（<span class="hljs-title class_">RTR</span>）为显性位的数据帧具有优先权，可继续发送。<br><br>- **<span class="hljs-title class_">CAN</span>通信错误种类**：如下表<br><br>  - ![错误表](./../photo/<span class="hljs-title class_">CAN</span>通信错误.png)<br><br>- **位时序**：由发送单元在非同步的情况下发送的每秒钟的位数称为位速率。一个位可分为 <span class="hljs-number">4</span> 段。同步段（<span class="hljs-title class_">SS</span>）传播时间段（<span class="hljs-title class_">PTS</span>）<br><br>  相位缓冲段 <span class="hljs-number">1</span>（<span class="hljs-title class_">PBS1</span>）相位缓冲段 <span class="hljs-number">2</span>（<span class="hljs-title class_">PBS2</span>）这些段又由可称为 <span class="hljs-title class_">Time</span> <span class="hljs-title class_">Quantum</span>（以下称为 <span class="hljs-title class_">Tq</span>）的最小时间单位构成。<br><br>- **<span class="hljs-title class_">CAN</span>通信同步的方法**：<span class="hljs-title class_">CAN</span> 协议的通信方法为 <span class="hljs-title class_">NRZ</span>（<span class="hljs-title class_">Non</span>-<span class="hljs-title class_">Return</span> to <span class="hljs-title class_">Zero</span>）方式。各个位的开头或者结尾都没有附加同步信号。发送单元以与位时序同步的方式开始发送数据。另外，接收单元根据总线上电平的变化进行同步并进行接收工作。但是，发送单元和接收单元存在的时钟频率误差及传输路径上的（电缆、驱动器等）相位延迟会引起同步偏差。因此接收单元通过硬件同步或者再同步的方法调整时序进行接收。<br><br><span class="hljs-comment">## 4.5CAN实例操作</span><br><br>- 基于stm32的<span class="hljs-title class_">CAN</span>通信<br><br>  - <span class="hljs-title class_">CAN</span> 发送流程为：程序选择 <span class="hljs-number">1</span> 个空置的邮箱（<span class="hljs-title class_">TME</span>=<span class="hljs-number">1</span>）→设置标识符（<span class="hljs-title class_">ID</span>），数据长度和 发送数据→设置 <span class="hljs-title class_">CAN_TIxR</span> 的 <span class="hljs-title class_">TXRQ</span> 位为 <span class="hljs-number">1</span>，请求发送→邮箱挂号（等待成为最高优先级）→ 预定发送（等待总线空闲）→发送→邮箱空置。<br><br>  - <span class="hljs-title class_">CAN</span> 接收到的有效报文，被存储在 <span class="hljs-number">3</span> 级邮箱深度的 <span class="hljs-title class_">FIFO</span> 中。<span class="hljs-title class_">CAN</span> 接收流程为：<span class="hljs-title class_">FIFO</span> 空→收到有效报文→挂号<span class="hljs-number">1</span>（存入 <span class="hljs-title class_">FIFO</span> 的一个邮箱，这个由硬件 控制，我们不需要理会）→收到有效报文→挂号<span class="hljs-number">2</span>→收到有效报文→挂号_3→收到有效报文溢 出。<br><br>  - 重点是构造发送的数据消息，跟接收的数据消息配置。<br><br>  - 并且配置的时候有多种模式可选择，比如回环模式和正常模式<br><br>  - ``` C<br>    /*<span class="hljs-title class_">HAL</span>库配置<span class="hljs-title class_">CAN</span>控制器,简略代码，列出关键,以<span class="hljs-title class_">CAN1</span>为例子*/<br>    <span class="hljs-title class_">CAN_HandleTypeDef</span>   g_canx_handler;     /* <span class="hljs-title class_">CANx</span>句柄 */<br>    <span class="hljs-title class_">CAN_TxHeaderTypeDef</span> g_canx_txheader;    /* 发送参数句柄 */<br>    <span class="hljs-title class_">CAN_RxHeaderTypeDef</span> g_canx_rxheader;    /* 接收参数句柄 */<br>    void can_init(uint32_t tsjw, uint32_t tbs2, uint32_t tbs1, uint16_t brp, uint32_t mode)<br>    &#123;<br>        /*<span class="hljs-title class_">CAN</span>的各种配置*/<br>        ...代码省略<br>        <span class="hljs-title class_">HAL_CAN_Init</span>(&amp;g_canx_handler);//<span class="hljs-title class_">HAL_CAN_Init</span>()-&gt;内部调用<span class="hljs-title class_">HAL_CAN_MspInit</span>()<br>        /*配置<span class="hljs-title class_">CAN</span>的过滤操作*/<br>        <span class="hljs-title class_">CAN_FilterTypeDef</span> sFilterConfig;<br>        ...配置过程省略<br>        <span class="hljs-title class_">HAL_CAN_ConfigFilter</span>(&amp;g_canx_handler, &amp;sFilterConfig)<br>        <br>    &#125;<br>    void <span class="hljs-title class_">HAL_CAN_MspInit</span>(<span class="hljs-title class_">CAN_HandleTypeDef</span> *hcan)//用来配置<span class="hljs-title class_">CAN</span>相关的引脚的状态<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">CAN1</span> == hcan-&gt;<span class="hljs-title class_">Instance</span>)<br>        &#123;<br>            __HAL_RCC_GPIOX_CLK_ENABLE();<br>            __HAL_RCC_CAN1_CLK_ENABLE();<br>            <span class="hljs-title class_">GPIO_InitTypeDef</span> gpio_initure;<br>            ...具体配置省略<br>            <span class="hljs-title class_">HAL_GPIO_Init</span>(<span class="hljs-title class_">GPIOX</span>, &amp;gpio_initure);<br>        &#125;<br>    &#125;<br>    <br>    uint8_t can_send_msg(uint32_t id, uint8_t *msg, uint8_t len)<br>    &#123;<br>          uint32_t <span class="hljs-title class_">TxMailbox</span> = <span class="hljs-title class_">CAN_TX_MAILBOX0</span>;<br>        <br>          g_canx_txheader.<span class="hljs-title class_">StdId</span> = id;         /* 标准标识符 */<br>          g_canx_txheader.<span class="hljs-title class_">ExtId</span> = id;         /* 扩展标识符(<span class="hljs-number">29</span>位) 标准标识符情况下，该成员无效*/<br>          g_canx_txheader.<span class="hljs-title class_">IDE</span> = <span class="hljs-title class_">CAN_ID_STD</span>;   /* 使用标准标识符 */<br>          g_canx_txheader.<span class="hljs-title class_">RTR</span> = <span class="hljs-title class_">CAN_RTR_DATA</span>; /* 数据帧 */<br>          g_canx_txheader.<span class="hljs-title class_">DLC</span> = len;<br>    <br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">HAL_CAN_AddTxMessage</span>(&amp;g_canx_handler, &amp;g_canx_txheader, msg, &amp;<span class="hljs-title class_">TxMailbox</span>) != <span class="hljs-title class_">HAL_OK</span>) /* 发送消息 */<br>      &#123;<br>        return <span class="hljs-number">1</span>;<br>      &#125;<br>      <br>      while (<span class="hljs-title class_">HAL_CAN_GetTxMailboxesFreeLevel</span>(&amp;g_canx_handler) != <span class="hljs-number">3</span>); /* 等待发送完成,所有邮箱(有三个邮箱)为空 */<br>      <br>      return <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    uint8_t can_receive_msg(uint32_t id, uint8_t *buf)<br>    &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">HAL_CAN_GetRxFifoFillLevel</span>(&amp;g_canx_handler, <span class="hljs-title class_">CAN_RX_FIFO0</span>) == <span class="hljs-number">0</span>)     /* 没有接收到数据 */<br>      &#123;<br>        return <span class="hljs-number">0</span>;<br>      &#125;<br>    <br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">HAL_CAN_GetRxMessage</span>(&amp;g_canx_handler, <span class="hljs-title class_">CAN_RX_FIFO0</span>, &amp;g_canx_rxheader, buf) != <span class="hljs-title class_">HAL_OK</span>)  /* 读取数据 */<br>      &#123;<br>        return <span class="hljs-number">0</span>;<br>      &#125;<br>      <br>      <span class="hljs-keyword">if</span> (g_canx_rxheader.<span class="hljs-title class_">StdId</span>!= id || g_canx_rxheader.<span class="hljs-title class_">IDE</span> != <span class="hljs-title class_">CAN_ID_STD</span> || g_canx_rxheader.<span class="hljs-title class_">RTR</span> != <span class="hljs-title class_">CAN_RTR_DATA</span>)       /* 接收到的<span class="hljs-title class_">ID</span>不对 / 不是标准帧 / 不是数据帧 */<br>      &#123;<br>        return <span class="hljs-number">0</span>;    <br>      &#125;<br>    <br>      return g_canx_rxheader.<span class="hljs-title class_">DLC</span>;<br>    &#125;<br>    /-&gt;<span class="hljs-title class_">CODEEND</span><br></code></pre></td></tr></table></figure></code></pre></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>stm32mp157启动及裸机程序处理</title>
    <link href="/2023/09/16/stm32mp157%E5%90%AF%E5%8A%A8%E5%8F%8A%E8%A3%B8%E6%9C%BA%E7%A8%8B%E5%BA%8F%E5%A4%84%E7%90%86/"/>
    <url>/2023/09/16/stm32mp157%E5%90%AF%E5%8A%A8%E5%8F%8A%E8%A3%B8%E6%9C%BA%E7%A8%8B%E5%BA%8F%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="1、stm32mp157启动方式"><a href="#1、stm32mp157启动方式" class="headerlink" title="1、stm32mp157启动方式"></a>1、stm32mp157启动方式</h1><p>​相对于MCU的启动方式，MPU的启动要复杂很多。对于MPU的芯片来说，启动方式都是大差不差，大致如下进行；看似先从启动bootloader，但是实际这个bootloader也需要运行的地方。所以大部分的芯片内部都有一小段存放厂商写好的一个裸机程序放在ROM里面，这里的ROM不是指的flash之类的。而是芯片内部的ROM，然后还有一个内部的RAM，这个不是DDR。</p><p>​stm32mp1的启动方式有以下几种，根据芯片的BOOT0和BOOT1和BOOT2引脚来设置。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>FreeRTOS总结</title>
    <link href="/2023/05/11/FreeRTOS%E6%80%BB%E7%BB%93/"/>
    <url>/2023/05/11/FreeRTOS%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="1、FreeRTOS简介"><a href="#1、FreeRTOS简介" class="headerlink" title="1、FreeRTOS简介"></a>1、FreeRTOS简介</h1><h2 id="1-1嵌入式操作系统简介"><a href="#1-1嵌入式操作系统简介" class="headerlink" title="1&#x2F;1嵌入式操作系统简介"></a>1&#x2F;1嵌入式操作系统简介</h2><ul><li>操作系统是允许多个任务“同时运行”的，操作系统的这个特性被称为多任务。然而实际 上，一个 CPU 核心在某一时刻只能运行一个任务，而操作系统中任务调度器的责任就是决定在 某一时刻 CPU 究竟要运行哪一个任务，任务调度器使得 CPU 在各个任务之间来回切换并处理 任务，由于切换处理任务的速度非常快，因此就给人造成了一种同一时刻有多个任务同时运行 的错觉。</li></ul><h2 id="1-2为什么要引入FreeRTOS"><a href="#1-2为什么要引入FreeRTOS" class="headerlink" title="1&#x2F;2为什么要引入FreeRTOS"></a>1&#x2F;2为什么要引入FreeRTOS</h2><ul><li>FreeRTOS是嵌入式实时操作系统的一种，但是它具备的优点：可移植性强、可裁剪、支持多种任务通讯、同步机制、高效的软件定时器、任务数量、优先级数量不限、运行效率高、支持抢占式、合作式调度、开源、免费、可商用。功能强大，技术成熟的实时操作系统。引入实时操作系统后，可以同步处理多个任务，让CPU执行效率更高。不像裸机结构，针对某个任务需要不断查询，造成CPU资源浪费。</li></ul><h2 id="1-3如何获取FreeRTOS"><a href="#1-3如何获取FreeRTOS" class="headerlink" title="1&#x2F;3如何获取FreeRTOS"></a>1&#x2F;3如何获取FreeRTOS</h2><ul><li>FreeRTOS是用C语言编写的一个操作系统，可以在官网获取到源码。<a href="https://www.freertos.org/zh-cn-cmn-s/">FreeRTOS官网链接</a></li></ul><p>进入官网后点击下载，即可获取最新的FreeRTOS的源码，如图所示：</p><p><img src="/./../photo/%E5%AE%98%E7%BD%91%E5%9B%BE.png"></p><h2 id="1-2FreeRTOS源码目录及其介绍"><a href="#1-2FreeRTOS源码目录及其介绍" class="headerlink" title="1&#x2F;2FreeRTOS源码目录及其介绍"></a>1&#x2F;2FreeRTOS源码目录及其介绍</h2><ul><li>下载解压后，如图所示 ：</li></ul><p><img src="/./../photo/%E6%BA%90%E7%A0%81.png"></p><ul><li><p>源码目录内容介绍：</p></li><li><pre><code class="DTS">├─FreeRTOS│  ├─Demo// 各种开发工具的完整Demo，开发者可以方便的以此搭建出自己的项目，甚至直接使用│  │  ├─Common// 所有例程都可以使用的演示例程文件│  │  └─其他// 对应平台和开发工具的项目例程（命名：平台_开发工具，例如：CORTEX_M4F_M0_LPC43xx_Keil）│  ├─License// 使用修改过的 GPL│  └─Source// FreeRTOS的源码│      ├─include// 源码对应的头文件│      └─portable// 每个支持的处理器架构需要一小段与处理器架构相关的RTOS代码。该目录下即为和开发平台相关的代码│            ├─MemMang// FreeRTOS内存管理方案（一般要根据平台来选择以下5个之一）│            │     heap_1.c│            │     heap_2.c│            │     heap_3.c│            │     heap_4.c│            │     heap_5.c│            └─其他// 其他开发工具相关的代码，需要根据自己的开发工具进行选择│      croutine.c// 协线程（协程）文件，和任务类似，在系统资源比较缺乏下使用│      event_groups.c// 事件标志组│      list.c// 列表结构描述，在内核整体控制上都使用了列表格式数据处理,一切数据结构的基础│      queue.c// 队列，任务和任务之间的通讯处理│      tasks.c// 所有任务相关函数│      timers.c// 软件定时器，以任务形式存在|      stream_buffer.c// 10.0.0 新增└─FreeRTOS-Plus// FreeRTOS+组件和演示例程<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><code class="hljs dts">  <br>  <br>  <br><br><span class="hljs-meta"># 2、FreeRTOS移植</span><br><br><span class="hljs-meta">## 2/1源码具体分类</span><br><br>- **操作系统内核核心文件**：内核的核心文件，包括任务管理、调度算法、消息通知...等等重要文件<br><br>  - ![](./..<span class="hljs-keyword">/photo/</span>freertos内核相关文件.png)<br><br>- **硬件架构相关的文件**：这个里面的内容都是与具体处理器架构相关的文件，根据不同的架构选择不同的文件，如图所示，这个里面的文件是操作系统跟硬件架构相适配，保证系统正常运行<br><br>  - 例如ARM架构下的cortex-m3和cortex-m4架构的文件如图<br><br>    ![](./..<span class="hljs-keyword">/photo/</span>freertos架构相关文件.png)<br><br>- **内存管理算法文件，以及配置文件**；FreeRTOS提供了<span class="hljs-number">5</span>种内存管理算法。为了方便裁剪系统，官方DEMO文件中定义了一个FreeRTOSConfig.h的头文件，里面都是一些宏开关，可以根据需求，来裁剪系统，使不需要的配置不被编译进目标文件。<br><br>  - 内存管理文件如图<br><br>    ![](./..<span class="hljs-keyword">/photo/</span>freertos内存管理相关文件.png)<br><br>  - 配置文件模板：这个配置文件，没有固定的文件，官方只是在示例中给出一些模板，用户可以根据这个模板来自己修改内容，另外可以模仿直接从写一份；如图所示<br><br>    ![](./..<span class="hljs-keyword">/photo/</span>freertos配置相关文件.png)<br><br><br><span class="hljs-meta">## 2/2基于CORTEX-M3/M4系列的移植</span><br><br>- 移植前需要稍微了解一下这两个架构异常和中断类型；<br><br>  - 如图就是cm3的异常表<br><br>    ![](./..<span class="hljs-keyword">/photo/</span>cm4异常表.png)<br><br>  - 这里我们主要关注这三个异常<br><br>    - SYSTICK异常：cortex-m系列的产品里面的系统滴答定时器产生的异常，在freertos中使用滴答定时器作为系统的心跳，以此来实现时间片轮转的调度功能；每当时间片（就是滴答定时器计数到了）到了，调用相应的中断服务函数来检查是否需要切换任务。在freertos的port.c中定义了相应的中断服务函数，如图；<br><br>      ![](./..<span class="hljs-keyword">/photo/</span>systick函数.png)<br><br>    - PendSV异常：根据上述，SYSTICK这个异常只是检查是否要进行任务切换，真正要实现任务切换的是触发PendSV异常，在freertos的port.c中定义了相应的中断服务函数，如图；<br><br>      ![](./..<span class="hljs-keyword">/photo/</span>pendsv函数.png)<br><br>    - SVC异常：这个异常在freertos中一般只会使用一次，它也是用来进行任务调度的，但是只在vTaskStartScheduler(void)这个函数里面调用一次，在freertos中定义了相关的中断服务函数。这个函数调用流程为（vTaskStartScheduler( void )-&gt;xPortStartScheduler( void )-&gt;prvPortStartFirstTask(void)在这个函数里面会触发svc异常）<br><br>      ![](./..<span class="hljs-keyword">/photo/</span>svc函数.png)<br><br>- 修改启动文件，启动文件里面定义了中断服务函数的名称，需要用freertos中的这三个函数名替换掉三个函数<br><br>  ![](./..<span class="hljs-keyword">/photo/</span>修改启动文件.png)<br><br>- 注释掉HAL库下的中断服务函数：stm32fxxx_it.c文件里面注释掉这三个函数。<br><br>- 最后就是将上述操作系统内核核心文件、架构文件、配置文件的c文件加入到项目内，然后添加相应的头文件路径。到这里基本上freertos移植完成了。剩下一些裁剪功能，配置等等在相应的配置文件来处理。<br><br><span class="hljs-meta">## 2/3配置文件以及内存管理算法细节</span><br><br>- 配置文件主要是对FreeRTOS.h这个头文件的内容进行一些裁剪，并且里面有些如果不定义就会报错；如图必须需要定义的；其他具体的配置内容可以参考FreeRTOS.h这个头文件来进行裁剪和进行配置<br><br>  ![](./..<span class="hljs-keyword">/photo/</span>freertos必须定义.png)<br><br>- FreeRTOSConfig.h模板如下：<br><br>  ``` C<br>  <span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> FREERTOS_CONFIG_H</span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> FREERTOS_CONFIG_H</span><br>  <br>  <span class="hljs-comment">/* 头文件 */</span><br>  <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br>  <br>  extern uint32_t SystemCoreC<span class="hljs-attr">lock</span><span class="hljs-punctuation">;</span><br>  <br>  <span class="hljs-comment">/* 基础配置项 */</span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configUSE_PREEMPTION                            1                       <span class="hljs-comment">/* 1: 抢占式调度器, 0: 协程式调度器, 无默认需定义 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configUSE_PORT_OPTIMISED_TASK_SELECTION         1                       <span class="hljs-comment">/* 1: 使用硬件计算下一个要运行的任务, 0: 使用软件算法计算下一个要运行的任务, 默认: 0 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configUSE_TICKLESS_IDLE                         0                       <span class="hljs-comment">/* 1: 使能tickless低功耗模式, 默认: 0 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configCPU_CLOCK_HZ                              SystemCoreClock         <span class="hljs-comment">/* 定义CPU主频, 单位: Hz, 无默认需定义 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configSYSTICK_CLOCK_HZ                          (configCPU_CLOCK_HZ / 8)<span class="hljs-comment">/* 定义SysTick时钟频率，当SysTick时钟频率与内核时钟频率不同时才可以定义, 单位: Hz, 默认: 不定义 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configTICK_RATE_HZ                              1000                    <span class="hljs-comment">/* 定义系统时钟节拍频率, 单位: Hz, 无默认需定义 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configMAX_PRIORITIES                            32                      <span class="hljs-comment">/* 定义最大优先级数, 最大优先级=configMAX_PRIORITIES-1, 无默认需定义 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configMINIMAL_STACK_SIZE                        128                     <span class="hljs-comment">/* 定义空闲任务的栈空间大小, 单位: Word, 无默认需定义 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configMAX_TASK_NAME_LEN                         16                      <span class="hljs-comment">/* 定义任务名最大字符数, 默认: 16 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configUSE_16_BIT_TICKS                          0                       <span class="hljs-comment">/* 1: 定义系统时钟节拍计数器的数据类型为16位无符号数, 无默认需定义 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configIDLE_SHOULD_YIELD                         1                       <span class="hljs-comment">/* 1: 使能在抢占式调度下,同优先级的任务能抢占空闲任务, 默认: 1 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configUSE_TASK_NOTIFICATIONS                    1                       <span class="hljs-comment">/* 1: 使能任务间直接的消息传递,包括信号量、事件标志组和消息邮箱, 默认: 1 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configTASK_NOTIFICATION_ARRAY_ENTRIES           1                       <span class="hljs-comment">/* 定义任务通知数组的大小, 默认: 1 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configUSE_MUTEXES                               1                       <span class="hljs-comment">/* 1: 使能互斥信号量, 默认: 0 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configUSE_RECURSIVE_MUTEXES                     1                       <span class="hljs-comment">/* 1: 使能递归互斥信号量, 默认: 0 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configUSE_COUNTING_SEMAPHORES                   1                       <span class="hljs-comment">/* 1: 使能计数信号量, 默认: 0 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configUSE_ALTERNATIVE_API                       0                       <span class="hljs-comment">/* 已弃用!!! */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configQUEUE_REGISTRY_SIZE                       8                       <span class="hljs-comment">/* 定义可以注册的信号量和消息队列的个数, 默认: 0 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configUSE_QUEUE_SETS                            1                       <span class="hljs-comment">/* 1: 使能队列集, 默认: 0 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configUSE_TIME_SLICING                          1                       <span class="hljs-comment">/* 1: 使能时间片调度, 默认: 1 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configUSE_NEWLIB_REENTRANT                      0                       <span class="hljs-comment">/* 1: 任务创建时分配Newlib的重入结构体, 默认: 0 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configENABLE_BACKWARD_COMPATIBILITY             0                       <span class="hljs-comment">/* 1: 使能兼容老版本, 默认: 1 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configNUM_THREAD_LOCAL_STORAGE_POINTERS         0                       <span class="hljs-comment">/* 定义线程本地存储指针的个数, 默认: 0 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configSTACK_DEPTH_TYPE                          uint16_t                <span class="hljs-comment">/* 定义任务堆栈深度的数据类型, 默认: uint16_t */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configMESSAGE_BUFFER_LENGTH_TYPE                size_t                  <span class="hljs-comment">/* 定义消息缓冲区中消息长度的数据类型, 默认: size_t */</span></span><br>  <br>  <span class="hljs-comment">/* 内存分配相关定义 */</span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configSUPPORT_STATIC_ALLOCATION                 0                       <span class="hljs-comment">/* 1: 支持静态申请内存, 默认: 0 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configSUPPORT_DYNAMIC_ALLOCATION                1                       <span class="hljs-comment">/* 1: 支持动态申请内存, 默认: 1 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configTOTAL_HEAP_SIZE                           ((size_t)(10 * 1024))   <span class="hljs-comment">/* FreeRTOS堆中可用的RAM总量, 单位: Byte, 无默认需定义 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configAPPLICATION_ALLOCATED_HEAP                0                       <span class="hljs-comment">/* 1: 用户手动分配FreeRTOS内存堆(ucHeap), 默认: 0 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configSTACK_ALLOCATION_FROM_SEPARATE_HEAP       0                       <span class="hljs-comment">/* 1: 用户自行实现任务创建时使用的内存申请与释放函数, 默认: 0 */</span></span><br>  <br>  <span class="hljs-comment">/* 钩子函数相关定义 */</span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configUSE_IDLE_HOOK                             0                       <span class="hljs-comment">/* 1: 使能空闲任务钩子函数, 无默认需定义  */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configUSE_TICK_HOOK                             0                       <span class="hljs-comment">/* 1: 使能系统时钟节拍中断钩子函数, 无默认需定义 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configCHECK_FOR_STACK_OVERFLOW                  0                       <span class="hljs-comment">/* 1: 使能栈溢出检测方法1, 2: 使能栈溢出检测方法2, 默认: 0 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configUSE_MALLOC_FAILED_HOOK                    0                       <span class="hljs-comment">/* 1: 使能动态内存申请失败钩子函数, 默认: 0 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configUSE_DAEMON_TASK_STARTUP_HOOK              0                       <span class="hljs-comment">/* 1: 使能定时器服务任务首次执行前的钩子函数, 默认: 0 */</span></span><br>  <br>  <span class="hljs-comment">/* 运行时间和任务状态统计相关定义 */</span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configGENERATE_RUN_TIME_STATS                   0                       <span class="hljs-comment">/* 1: 使能任务运行时间统计功能, 默认: 0 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">if</span> configGENERATE_RUN_TIME_STATS</span><br>  <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;./BSP/TIMER/btim.h&quot;</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> portCONFIGURE_TIMER_FOR_RUN_TIME_STATS()        ConfigureTimeForRunTimeStats()</span><br>  extern uint32_t FreeRTOSRunTimeT<span class="hljs-attr">icks</span><span class="hljs-punctuation">;</span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> portGET_RUN_TIME_COUNTER_VALUE()                FreeRTOSRunTimeTicks</span><br>  <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configUSE_TRACE_FACILITY                        1                       <span class="hljs-comment">/* 1: 使能可视化跟踪调试, 默认: 0 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configUSE_STATS_FORMATTING_FUNCTIONS            1                       <span class="hljs-comment">/* 1: configUSE_TRACE_FACILITY为1时，会编译vTaskList()和vTaskGetRunTimeStats()函数, 默认: 0 */</span></span><br>  <br>  <span class="hljs-comment">/* 协程相关定义 */</span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configUSE_CO_ROUTINES                           0                       <span class="hljs-comment">/* 1: 启用协程, 默认: 0 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configMAX_CO_ROUTINE_PRIORITIES                 2                       <span class="hljs-comment">/* 定义协程的最大优先级, 最大优先级=configMAX_CO_ROUTINE_PRIORITIES-1, 无默认configUSE_CO_ROUTINES为1时需定义 */</span></span><br>  <br>  <span class="hljs-comment">/* 软件定时器相关定义 */</span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configUSE_TIMERS                                1                               <span class="hljs-comment">/* 1: 使能软件定时器, 默认: 0 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configTIMER_TASK_PRIORITY                       ( configMAX_PRIORITIES - 1 )    <span class="hljs-comment">/* 定义软件定时器任务的优先级, 无默认configUSE_TIMERS为1时需定义 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configTIMER_QUEUE_LENGTH                        5                               <span class="hljs-comment">/* 定义软件定时器命令队列的长度, 无默认configUSE_TIMERS为1时需定义 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configTIMER_TASK_STACK_DEPTH                    ( configMINIMAL_STACK_SIZE * 2) <span class="hljs-comment">/* 定义软件定时器任务的栈空间大小, 无默认configUSE_TIMERS为1时需定义 */</span></span><br>  <br>  <span class="hljs-comment">/* 可选函数, 1: 使能 */</span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> INCLUDE_vTaskPrioritySet                        1                       <span class="hljs-comment">/* 设置任务优先级 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> INCLUDE_uxTaskPriorityGet                       1                       <span class="hljs-comment">/* 获取任务优先级 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> INCLUDE_vTaskDelete                             1                       <span class="hljs-comment">/* 删除任务 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> INCLUDE_vTaskSuspend                            1                       <span class="hljs-comment">/* 挂起任务 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> INCLUDE_xResumeFromISR                          1                       <span class="hljs-comment">/* 恢复在中断中挂起的任务 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> INCLUDE_vTaskDelayUntil                         1                       <span class="hljs-comment">/* 任务绝对延时 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> INCLUDE_vTaskDelay                              1                       <span class="hljs-comment">/* 任务延时 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> INCLUDE_xTaskGetSchedulerState                  1                       <span class="hljs-comment">/* 获取任务调度器状态 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> INCLUDE_xTaskGetCurrentTaskHandle               1                       <span class="hljs-comment">/* 获取当前任务的任务句柄 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> INCLUDE_uxTaskGetStackHighWaterMark             1                       <span class="hljs-comment">/* 获取任务堆栈历史剩余最小值 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> INCLUDE_xTaskGetIdleTaskHandle                  1                       <span class="hljs-comment">/* 获取空闲任务的任务句柄 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> INCLUDE_eTaskGetState                           1                       <span class="hljs-comment">/* 获取任务状态 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> INCLUDE_xEventGroupSetBitFromISR                1                       <span class="hljs-comment">/* 在中断中设置事件标志位 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> INCLUDE_xTimerPendFunctionCall                  1                       <span class="hljs-comment">/* 将函数的执行挂到定时器服务任务 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> INCLUDE_xTaskAbortDelay                         1                       <span class="hljs-comment">/* 中断任务延时 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> INCLUDE_xTaskGetHandle                          1                       <span class="hljs-comment">/* 通过任务名获取任务句柄 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> INCLUDE_xTaskResumeFromISR                      1                       <span class="hljs-comment">/* 恢复在中断中挂起的任务 */</span></span><br>  <br>  <span class="hljs-comment">/* 中断嵌套行为配置 */</span><br>  <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __NVIC_PRIO_BITS</span><br>      <span class="hljs-meta">#<span class="hljs-keyword">define</span> configPRIO_BITS __NVIC_PRIO_BITS</span><br>  <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      <span class="hljs-meta">#<span class="hljs-keyword">define</span> configPRIO_BITS 4</span><br>  <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configLIBRARY_LOWEST_INTERRUPT_PRIORITY         15                  <span class="hljs-comment">/* 中断最低优先级 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY    5                   <span class="hljs-comment">/* FreeRTOS可管理的最高中断优先级 */</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configKERNEL_INTERRUPT_PRIORITY                 ( configLIBRARY_LOWEST_INTERRUPT_PRIORITY &lt;&lt; (8 - configPRIO_BITS) )</span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configMAX_SYSCALL_INTERRUPT_PRIORITY            ( configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY &lt;&lt; (8 - configPRIO_BITS) )</span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configMAX_API_CALL_INTERRUPT_PRIORITY           configMAX_SYSCALL_INTERRUPT_PRIORITY</span><br>  <br>  <span class="hljs-comment">/* FreeRTOS中断服务函数相关定义 */</span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> xPortPendSVHandler                              PendSV_Handler</span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> vPortSVCHandler                                 SVC_Handler</span><br>  <br>  <span class="hljs-comment">/* 断言 */</span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> vAssertCalled(char, int) printf(<span class="hljs-string">&quot;Error: %s, %d\r\n&quot;</span>, char, int)</span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> configASSERT( x ) <span class="hljs-keyword">if</span>( ( x ) == 0 ) vAssertCalled( __FILE__, __LINE__ )</span><br>  <br>  <span class="hljs-comment">/* FreeRTOS MPU 特殊定义 */</span><br>  <span class="hljs-comment">//#define configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS 0</span><br>  <span class="hljs-comment">//#define configTOTAL_MPU_REGIONS                                8</span><br>  <span class="hljs-comment">//#define configTEX_S_C_B_FLASH                                  0x07UL</span><br>  <span class="hljs-comment">//#define configTEX_S_C_B_SRAM                                   0x07UL</span><br>  <span class="hljs-comment">//#define configENFORCE_SYSTEM_CALLS_FROM_KERNEL_ONLY            1</span><br>  <span class="hljs-comment">//#define configALLOW_UNPRIVILEGED_CRITICAL_SECTIONS             1</span><br>  <br>  <span class="hljs-comment">/* ARMv8-M 安全侧端口相关定义。 */</span><br>  <span class="hljs-comment">//#define secureconfigMAX_SECURE_CONTEXTS         5</span><br>  <br>  <span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* FREERTOS_CONFIG_H */</span></span><br></code></pre></td></tr></table></figure></code></pre></li><li><p>FreeRTOS提供的五种内存管理算法</p><ul><li><table><thead><tr><th align="center">文件</th><th align="center">优点</th><th align="center">缺点</th></tr></thead><tbody><tr><td align="center">heap_1.c</td><td align="center">分配简单，时间确定</td><td align="center">只分配空间，不能释放</td></tr><tr><td align="center">heap_2.c</td><td align="center">动态分配、最佳匹配</td><td align="center">内存碎片化、时间不定</td></tr><tr><td align="center">heap_3.c</td><td align="center">调用标准C库的函数</td><td align="center">速度慢、时间不定</td></tr><tr><td align="center">heap_4.c</td><td align="center">第二种方法的增强版，可以合并相邻空闲内存，解决碎片化</td><td align="center">时间不定</td></tr><tr><td align="center">heap_5.c</td><td align="center">在第四种方法上支持分隔内存块，解决碎片化</td><td align="center">时间不定</td></tr></tbody></table></li><li><p>heap_1的实现方法；它只提供分配函数，不提供释放函数，具体实现就是直接定义一个大数组如图所示：<img src="/./../photo/heap1%E6%95%B0%E7%BB%84%E5%AE%9A%E4%B9%89.png"></p><p>这个实现只是在要求使用 RAM 时将一个单一的数组细分为更小的块 。 数组的总大小（堆的总大小）通过 configTOTAL_HEAP_SIZE （定义于 FreeRTOSConfig.h 中）设置 。</p></li><li><p>heap_2实现方法；heap_2也是在数组上分配内存，跟heap_1不一样的地方在于heap_2使用<strong>最佳匹配算法</strong>(best fit)来分配内存，它支持vPortFree，例如有有三块空闲内存5B,25B,100B现在要申请20B的空间，那么就会将25B的空间划分为20B跟5B。但是这样可能就会造成碎片，就算释放掉申请的20B空间，它也不会把原先的5B空间合并成一个，如果5B的空间一直没人用的话，就会成碎片。</p></li><li><p>heap_3实现方法；他直接调用标准C库的malloc函数跟free函数，但是FreeRTOS中会先暂停调度器，再去调用这些函数，实现了线程安全</p></li><li><p>heap_4实现方法；heap_4使用<strong>首次适应算法</strong>(first fit)来分配内存,例如有三块空闲内存5B,100B,25B现在要申请20B的空间，那么它会找到第一个满足20B的内存，这里就是先找到100B，把它分为20B跟80B的空间，当释放掉申请的内存时候，它会把释放的20B的内存跟80B的内存从新合并成一块100B的内存。它还会把相邻的空闲内存合并为一个更大的空闲内存，这有助于较少内存的碎片问题。</p></li><li><p>heap_5实现方法；heap_5分配内存、释放内存的算法跟heap_4是一样的。但是heap_5不局限于管理一个大数组，可以管理很多块内存、分隔的内存。但是必须记录每块内存的地址以及大小，用结构体保存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">* <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HeapRegion</span></span><br><span class="hljs-class">* &#123;</span><br>*  <span class="hljs-type">uint8_t</span> *pucStartAddress; &lt;&lt; Start address of a block of memory that will be part of the heap.<br>*  <span class="hljs-type">size_t</span> xSizeInBytes;      &lt;&lt; Size of the block of memory.<br>* &#125; HeapRegion_t;<br></code></pre></td></tr></table></figure><p>如果要定义多块内存，就用该结构体数组形式来表示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">* HeapRegion_t xHeapRegions[] =<br>* &#123;<br>*  &#123; ( <span class="hljs-type">uint8_t</span> * ) <span class="hljs-number">0x80000000</span>UL, <span class="hljs-number">0x10000</span> &#125;, &lt;&lt; Defines a block of <span class="hljs-number">0x10000</span> bytes starting at address <span class="hljs-number">0x80000000</span><br>*  &#123; ( <span class="hljs-type">uint8_t</span> * ) <span class="hljs-number">0x90000000</span>UL, <span class="hljs-number">0xa0000</span> &#125;, &lt;&lt; Defines a block of <span class="hljs-number">0xa0000</span> bytes starting at address of <span class="hljs-number">0x90000000</span><br>*  &#123; <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span> &#125;                &lt;&lt; Terminates the <span class="hljs-built_in">array</span>.<br>* &#125;;<br>*<br></code></pre></td></tr></table></figure></li><li><p>在实际使用的时候我们只需要选择其中一个内存管理算法就行。每个算法提供的申请内存的函数都是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> * <span class="hljs-title function_">pvPortMalloc</span><span class="hljs-params">( <span class="hljs-type">size_t</span> xWantedSize )</span><br>&#123;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><p>释放函数都是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">vPortFree</span><span class="hljs-params">( <span class="hljs-type">void</span> * pv )</span><br>&#123;<br>    .......<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h1 id="3、FreeRTOS源码"><a href="#3、FreeRTOS源码" class="headerlink" title="3、FreeRTOS源码"></a>3、FreeRTOS源码</h1><h2 id="3-1内核的列表"><a href="#3-1内核的列表" class="headerlink" title="3&#x2F;1内核的列表"></a>3&#x2F;1内核的列表</h2><ul><li><p>在FreeRTOS中列表是个很重要的数据结构，实质就是一个双向链表；FreeRTOS中定义了就绪列表、等待列表、挂起列表、延时列表、终止列表。任务切换等操作都是通过查找对应的列表来实现的。在list.h文件内都是有关列表的定义，以及函数的声明。</p></li><li><p>列表项的数据结构定义，及示意图；</p><ul><li><p>普通列表项</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xLIST_ITEM</span></span><br><span class="hljs-class">&#123;</span><br>    listFIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE           <span class="hljs-comment">/*&lt; Set to a known value if configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */</span><br>    configLIST_VOLATILE TickType_t xItemValue;          <span class="hljs-comment">/*&lt; The value being listed.  In most cases this is used to sort the list in ascending order. */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xLIST_ITEM</span> * <span class="hljs-title">configLIST_VOLATILE</span> <span class="hljs-title">pxNext</span>;</span>     <span class="hljs-comment">/*&lt; Pointer to the next ListItem_t in the list. */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xLIST_ITEM</span> * <span class="hljs-title">configLIST_VOLATILE</span> <span class="hljs-title">pxPrevious</span>;</span> <span class="hljs-comment">/*&lt; Pointer to the previous ListItem_t in the list. */</span><br>    <span class="hljs-type">void</span> * pvOwner;                                     <span class="hljs-comment">/*&lt; Pointer to the object (normally a TCB) that contains the list item.  There is therefore a two way link between the object containing the list item and the list item itself. */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xLIST</span> * <span class="hljs-title">configLIST_VOLATILE</span> <span class="hljs-title">pxContainer</span>;</span>     <span class="hljs-comment">/*&lt; Pointer to the list in which this list item is placed (if any). */</span><br>    listSECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE          <span class="hljs-comment">/*&lt; Set to a known value if configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/./../photo/%E5%88%97%E8%A1%A8%E9%A1%B9%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p></li><li><p>迷你列表项</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xMINI_LIST_ITEM</span></span><br><span class="hljs-class">&#123;</span><br>    listFIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE <span class="hljs-comment">/*&lt; Set to a known value if configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */</span><br>    configLIST_VOLATILE TickType_t xItemValue;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xLIST_ITEM</span> * <span class="hljs-title">configLIST_VOLATILE</span> <span class="hljs-title">pxNext</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xLIST_ITEM</span> * <span class="hljs-title">configLIST_VOLATILE</span> <span class="hljs-title">pxPrevious</span>;</span><br>&#125;;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xMINI_LIST_ITEM</span> <span class="hljs-title">MiniListItem_t</span>;</span><br></code></pre></td></tr></table></figure><p><img src="/./../photo/%E8%BF%B7%E4%BD%A0%E5%88%97%E8%A1%A8%E9%A1%B9%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p></li></ul></li><li><p>列表数据结构定义，及其示意图；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xLIST</span></span><br><span class="hljs-class">&#123;</span><br>    listFIRST_LIST_INTEGRITY_CHECK_VALUE      <span class="hljs-comment">/*&lt; Set to a known value if configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */</span><br>    <span class="hljs-keyword">volatile</span> UBaseType_t uxNumberOfItems;<br>    ListItem_t * configLIST_VOLATILE pxIndex; <span class="hljs-comment">/*&lt; Used to walk through the list.  Points to the last item returned by a call to listGET_OWNER_OF_NEXT_ENTRY (). */</span><br>    MiniListItem_t xListEnd;                  <span class="hljs-comment">/*&lt; List item that contains the maximum possible item value meaning it is always at the end of the list and is therefore used as a marker. */</span><br>    listSECOND_LIST_INTEGRITY_CHECK_VALUE     <span class="hljs-comment">/*&lt; Set to a known value if configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */</span><br>&#125; List_t;<br></code></pre></td></tr></table></figure><p><img src="/./../photo/%E5%88%97%E8%A1%A8%E7%9A%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p></li><li><p>切记列表里面的迷你列表项，不算做列表中的列表项的个数</p></li><li><p>FreeRTOS列表操作函数</p><table><thead><tr><th align="center">函数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">void vListInitialise( List_t * const pxList )</td><td align="center">初始化列表头</td></tr><tr><td align="center">void vListInitialiseItem( ListItem_t * const pxItem )</td><td align="center">初始化列表项</td></tr><tr><td align="center">void vListInsert( List_t * const pxList,<br/>                  ListItem_t * const pxNewListItem )</td><td align="center">按照列表项里的列表值进行顺序插入列表</td></tr><tr><td align="center">void vListInsertEnd( List_t * const pxList,<br/>                     ListItem_t * const pxNewListItem )</td><td align="center">列表末端插入，这里特别要注意，这里并不一定是插到xListEnd后面，具体是插在pxIndex指向的列表项前面</td></tr><tr><td align="center">UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )</td><td align="center">删除列表项，返回移除后列表中列表项的多少</td></tr></tbody></table></li></ul><h2 id="3-2任务操作相关函数"><a href="#3-2任务操作相关函数" class="headerlink" title="3&#x2F;2任务操作相关函数"></a>3&#x2F;2任务操作相关函数</h2><p>- </p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
